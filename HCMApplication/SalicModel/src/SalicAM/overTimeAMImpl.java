package SalicAM;

import SalicAM.common.overTimeAM;

import SalicROVO.CheckClaimedAmountVOImpl;
import SalicROVO.CheckGradeAllowanceVOImpl;
import SalicROVO.ValidateSalAdvROVOImpl;


import java.math.BigDecimal;

import oracle.adf.share.ADFContext;

import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;
import java.sql.Date;

import java.util.Calendar;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 19 10:09:29 GST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class overTimeAMImpl extends ApplicationModuleImpl implements overTimeAM {
    /**
     * This is the default constructor (do not remove).
     */
    public overTimeAMImpl() {
    }

    /**
     * Container's getter for XxfndLookupTypesTVO1.
     * @return XxfndLookupTypesTVO1
     */
    public ViewObjectImpl getXxfndLookupTypesTVO1() {
        return (ViewObjectImpl)findViewObject("XxfndLookupTypesTVO1");
    }

    /**
     * Container's getter for XxfndLookupValuesTVO1.
     * @return XxfndLookupValuesTVO1
     */
    public ViewObjectImpl getXxfndLookupValuesTVO1() {
        return (ViewObjectImpl)findViewObject("XxfndLookupValuesTVO1");
    }

    /**
     * Container's getter for XxhcmOvertimeDetailsAllVO1.
     * @return XxhcmOvertimeDetailsAllVO1
     */
    public ViewObjectImpl getXxhcmOvertimeDetailsAllVO1() {
        return (ViewObjectImpl) findViewObject("XxhcmOvertimeDetailsAllVO1");
    }

    /**
     * Container's getter for XxhcmOvertimeHeadersAllVO1.
     * @return XxhcmOvertimeHeadersAllVO1
     */
    public ViewObjectImpl getXxhcmOvertimeHeadersAllVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmOvertimeHeadersAllVO1");
    }

    /**
     * Container's getter for XxhcmOvertimeDetailsAllVO2.
     * @return XxhcmOvertimeDetailsAllVO2
     */
    public ViewObjectImpl getXxhcmOvertimeDetailsAllVO2() {
        return (ViewObjectImpl) findViewObject("XxhcmOvertimeDetailsAllVO2");
    }

    /**
     * Container's getter for XxQpActionHistoryTVO1.
     * @return XxQpActionHistoryTVO1
     */
    public ViewObjectImpl getXxQpActionHistoryTVO1() {
        return (ViewObjectImpl)findViewObject("XxQpActionHistoryTVO1");
    }

    /**
     * Container's getter for otHdrROVO1.
     * @return otHdrROVO1
     */
    public ViewObjectImpl getotHdrROVO1() {
        return (ViewObjectImpl)findViewObject("otHdrROVO1");
    }

    /**
     * Container's getter for XxhcmMasterAttachment_VO2.
     * @return XxhcmMasterAttachment_VO2
     */
    public ViewObjectImpl getXxhcmMasterAttachment_VO2() {
        return (ViewObjectImpl)findViewObject("XxhcmMasterAttachment_VO2");
    }

    /**
     * Container's getter for XxhcmOvertimeHeadersAllVO2.
     * @return XxhcmOvertimeHeadersAllVO2
     */
    public ViewObjectImpl getXxhcmOvertimeHeadersAllVO2() {
        return (ViewObjectImpl)findViewObject("XxhcmOvertimeHeadersAllVO2");
    }

    /**
     * Container's getter for absenceROVO1.
     * @return absenceROVO1
     */
    public ViewObjectImpl getabsenceROVO1() {
        return (ViewObjectImpl)findViewObject("absenceROVO1");
    }

    /**
     * Container's getter for childValidationROVO1.
     * @return childValidationROVO1
     */
    public ViewObjectImpl getchildValidationROVO1() {
        return (ViewObjectImpl)findViewObject("childValidationROVO1");
    }

    /**
     * Container's getter for childSemROVO1.
     * @return childSemROVO1
     */
    public ViewObjectImpl getchildSemROVO1() {
        return (ViewObjectImpl)findViewObject("childSemROVO1");
    }

    /**
     * Container's getter for childSemCheckROVO1.
     * @return childSemCheckROVO1
     */
    public ViewObjectImpl getchildSemCheckROVO1() {
        return (ViewObjectImpl)findViewObject("childSemCheckROVO1");
    }

    /**
     * Container's getter for hireROVO1.
     * @return hireROVO1
     */
    public ViewObjectImpl gethireROVO1() {
        return (ViewObjectImpl)findViewObject("hireROVO1");
    }

    /**
     * Container's getter for ethnicROVO1.
     * @return ethnicROVO1
     */
    public ViewObjectImpl getethnicROVO1() {
        return (ViewObjectImpl)findViewObject("ethnicROVO1");
    }

    /**
     * Container's getter for salaryROVO1.
     * @return salaryROVO1
     */
    public ViewObjectImpl getsalaryROVO1() {
        return (ViewObjectImpl)findViewObject("salaryROVO1");
    }

    /**
     * Container's getter for overtimeHdrDtl1.
     * @return overtimeHdrDtl1
     */
    public ViewLinkImpl getovertimeHdrDtl1() {
        return (ViewLinkImpl)findViewLink("overtimeHdrDtl1");
    }

    /**
     * Container's getter for reqHdrActionHisVL1.
     * @return reqHdrActionHisVL1
     */
    public ViewLinkImpl getreqHdrActionHisVL1() {
        return (ViewLinkImpl)findViewLink("reqHdrActionHisVL1");
    }

    /**
     * Container's getter for OverTimeMaster_Attachment_VL1.
     * @return OverTimeMaster_Attachment_VL1
     */
    public ViewLinkImpl getOverTimeMaster_Attachment_VL1() {
        return (ViewLinkImpl)findViewLink("OverTimeMaster_Attachment_VL1");
    }
    public void insertRecords(){
        this.getXxhcmOvertimeHeadersAllVO1().createRow();
        if ("ot".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("page"))) {
            
        }
        else{
            this.getXxhcmOvertimeDetailsAllVO2().createRow();
        }
       
    }

    /**
     * Container's getter for getOverTimeHdrId_ROVO1.
     * @return getOverTimeHdrId_ROVO1
     */
    public ViewObjectImpl getgetOverTimeHdrId_ROVO1() {
        return (ViewObjectImpl)findViewObject("getOverTimeHdrId_ROVO1");
    }

    /**
     * Container's getter for XxhcmPurposeOfTrvl_VO2.
     * @return XxhcmPurposeOfTrvl_VO2
     */
    public ViewObjectImpl getXxhcmPurposeOfTrvl_VO2() {
        return (ViewObjectImpl)findViewObject("XxhcmPurposeOfTrvl_VO2");
    }

    /**
     * Container's getter for XxhcmPurposeOfTrvl_VO1.
     * @return XxhcmPurposeOfTrvl_VO1
     */
    public ViewObjectImpl getXxhcmPurposeOfTrvl_VO1() {
        return (ViewObjectImpl)findViewObject("XxhcmPurposeOfTrvl_VO1");
    }

    /**
     * Container's getter for XxhcmPurposeOfTrvl_VO3.
     * @return XxhcmPurposeOfTrvl_VO3
     */
    public ViewObjectImpl getXxhcmPurposeOfTrvl_VO3() {
        return (ViewObjectImpl)findViewObject("XxhcmPurposeOfTrvl_VO3");
    }

    /**
     * Container's getter for XxhcmOtherExpenseTVO1.
     * @return XxhcmOtherExpenseTVO1
     */
    public ViewObjectImpl getXxhcmOtherExpenseTVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmOtherExpenseTVO1");
    }

    /**
     * Container's getter for XxhcmAttachmentsTVO1.
     * @return XxhcmAttachmentsTVO1
     */
    public ViewObjectImpl getXxhcmAttachmentsTVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmAttachmentsTVO1");
    }

    /**
     * Container's getter for OnValidateStartDateEndDateROVO1.
     * @return OnValidateStartDateEndDateROVO1
     */
    public ViewObjectImpl getOnValidateStartDateEndDateROVO1() {
        return (ViewObjectImpl)findViewObject("OnValidateStartDateEndDateROVO1");
    }

    /**
     * Container's getter for OverTimeDetPurposeOfTrvlVL1.
     * @return OverTimeDetPurposeOfTrvlVL1
     */
    public ViewLinkImpl getOverTimeDetPurposeOfTrvlVL1() {
        return (ViewLinkImpl)findViewLink("OverTimeDetPurposeOfTrvlVL1");
    }

    /**
     * Container's getter for OverTimeDetPurposeOfTrvlVL2.
     * @return OverTimeDetPurposeOfTrvlVL2
     */
    public ViewLinkImpl getOverTimeDetPurposeOfTrvlVL2() {
        return (ViewLinkImpl)findViewLink("OverTimeDetPurposeOfTrvlVL2");
    }

    /**
     * Container's getter for OverTimeDetPurposeOfTrvlVL3.
     * @return OverTimeDetPurposeOfTrvlVL3
     */
    public ViewLinkImpl getOverTimeDetPurposeOfTrvlVL3() {
        return (ViewLinkImpl)findViewLink("OverTimeDetPurposeOfTrvlVL3");
    }

    /**
     * Container's getter for OverTimeDet_OtherExpenseVL1.
     * @return OverTimeDet_OtherExpenseVL1
     */
    public ViewLinkImpl getOverTimeDet_OtherExpenseVL1() {
        return (ViewLinkImpl)findViewLink("OverTimeDet_OtherExpenseVL1");
    }

    /**
     * Container's getter for OtherExpense_AttachmentVl1.
     * @return OtherExpense_AttachmentVl1
     */
    public ViewLinkImpl getOtherExpense_AttachmentVl1() {
        return (ViewLinkImpl)findViewLink("OtherExpense_AttachmentVl1");
    }

    /**
     * Container's getter for CheckEmployeeReqExistsROVO1.
     * @return CheckEmployeeReqExistsROVO1
     */
    public ViewObjectImpl getCheckEmployeeReqExistsROVO1() {
        return (ViewObjectImpl) findViewObject("CheckEmployeeReqExistsROVO1");
    }

    /**
     * Container's getter for ValidateSalAdvROVO1.
     * @return ValidateSalAdvROVO1
     */
    public ValidateSalAdvROVOImpl getValidateSalAdvROVO1() {
        return (ValidateSalAdvROVOImpl) findViewObject("ValidateSalAdvROVO1");
    }

    /**
     * Container's getter for GetTicketTypeROVO1.
     * @return GetTicketTypeROVO1
     */
    public ViewObjectImpl getGetTicketTypeROVO1() {
        return (ViewObjectImpl) findViewObject("GetTicketTypeROVO1");
    }
    
    public String getAirTicketType(String grade,String dest){
        String arTcTyp = null;
        ViewObject vo  = getGetTicketTypeROVO1();
        vo.setNamedWhereClauseParam("bind_dest", dest);
        vo.setNamedWhereClauseParam("bind_grade", grade);
        vo.executeQuery();
        if(vo.hasNext()){
            arTcTyp = (String) vo.first().getAttribute("TicketType");
        }
        return arTcTyp;
    }
    
    public String getOTGradeEligibility(String grade){
        String vFlag = null;
        ViewObject vo  = getGetValidGradesForOTReqROVO1();
        vo.setNamedWhereClauseParam("bind_grade", grade);
        vo.executeQuery();
        
        if(vo.hasNext()){
            vFlag = (String) vo.first().getAttribute("ValueFlag");
        }
        return vFlag;
    }

    /**
     * Container's getter for GetValidGradesForOTReqROVO1.
     * @return GetValidGradesForOTReqROVO1
     */
    public ViewObjectImpl getGetValidGradesForOTReqROVO1() {
        return (ViewObjectImpl) findViewObject("GetValidGradesForOTReqROVO1");
    }

    /**
     * Container's getter for getPerDMRatesROVO1.
     * @return getPerDMRatesROVO1
     */
    public ViewObjectImpl getgetPerDMRatesROVO1() {
        return (ViewObjectImpl) findViewObject("getPerDMRatesROVO1");
    }

    /**
     * Container's getter for GetCurrencyROVO1.
     * @return GetCurrencyROVO1
     */
    public ViewObjectImpl getGetCurrencyROVO1() {
        return (ViewObjectImpl) findViewObject("GetCurrencyROVO1");
    }
    
    public Number getPerDMRate(String dest,String grade){
        Number dmrate = null;
        ViewObject vo  = getgetPerDMRatesROVO1();
        vo.setNamedWhereClauseParam("bind_dest", dest);
        vo.setNamedWhereClauseParam("bind_grade", grade);
        vo.executeQuery();
        if(vo.hasNext()){
            dmrate = (Number) vo.first().getAttribute("Perdiem");
        }
        
        return dmrate;
    }
    public Number getCurrwncyRate(String fromcurr,String grade){
        Number dmrate = null;
        ViewObject vo  = getGetCurrencyROVO1();
        vo.setNamedWhereClauseParam("bind_from", fromcurr);
        
        vo.executeQuery();
        if(vo.hasNext()){
            dmrate = (Number) vo.first().getAttribute("ConversionRate");
        }
        
        return dmrate;
    }

    /**
     * Container's getter for CheckGradeAllowanceVO1.
     * @return CheckGradeAllowanceVO1
     */
    public CheckGradeAllowanceVOImpl getCheckGradeAllowanceVO1() {
        return (CheckGradeAllowanceVOImpl) findViewObject("CheckGradeAllowanceVO1");
    }
    
    public BigDecimal fetchMaxAmountForEmployee(BigDecimal empId){
        CheckGradeAllowanceVOImpl gradeVO = getCheckGradeAllowanceVO1();
        gradeVO.setbindEmpId(empId);
        gradeVO.executeQuery();
        if(gradeVO.getEstimatedRowCount() > 0){
            return (BigDecimal) gradeVO.first().getAttribute("MaxAmount");
        }
        else{
            return null;
        }
    }
    
    public BigDecimal fetchAvlAmountForChild(BigDecimal childId, Date invDate, BigDecimal maxAmt){
        CheckClaimedAmountVOImpl claimedVO = getCheckClaimedAmountVO1();
        if(invDate != null && childId != null){
            Calendar cal = Calendar.getInstance();
            cal.setTime(invDate);
            int month = cal.get(Calendar.MONTH);
            int year = cal.get(Calendar.YEAR);
            Integer startYear = 0;
            Integer endYear = 0;
            if(month >= 9){
                startYear = year;
                endYear = year+1;
            }
            else{
                startYear = year-1;
                endYear = year;
            }
            claimedVO.setbindStartDate("01-09-"+startYear);
            claimedVO.setbindStartDate("31-08-"+endYear);
            claimedVO.setbindChildId(childId);
            claimedVO.executeQuery();
            if(claimedVO.getEstimatedRowCount() > 0){
                BigDecimal claimedAmt = (BigDecimal) claimedVO.first().getAttribute("ClaimedAmount");
                if(maxAmt != null && claimedAmt != null)
                    return maxAmt.subtract(claimedAmt);
            }
            else{
                return maxAmt;
            }
        }
        return maxAmt;
    }

    /**
     * Container's getter for CheckClaimedAmountVO1.
     * @return CheckClaimedAmountVO1
     */
    public CheckClaimedAmountVOImpl getCheckClaimedAmountVO1() {
        return (CheckClaimedAmountVOImpl) findViewObject("CheckClaimedAmountVO1");
    }
}
