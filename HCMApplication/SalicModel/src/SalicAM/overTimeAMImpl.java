package SalicAM;

import SalicROVO.ValidateOTonLeaveROVOImpl;
import SalicROVO.ValidateOverTimeReqVOImpl;

import SalicView.XxhcmOtherExpenseTVOImpl;

import SalicROVO.getUserARStatusROVOImpl;

import SalicView.XxhcmPurposeOfTrvl_VOImpl;

import java.sql.SQLException;

import SalicAM.common.overTimeAM;

import SalicROVO.CheckChildsForEmployeeInYearVOImpl;
import SalicROVO.CheckClaimedAmountVOImpl;
import SalicROVO.CheckGradeAllowanceVOImpl;
import SalicROVO.GetJobLevelROVOImpl;
import SalicROVO.GetJobLevelROVORowImpl;
import SalicROVO.GetManagerDetailsROVOImpl;
import SalicROVO.OvertimeHoursForEmpROVOImpl;
import SalicROVO.ValidateSalAdvROVOImpl;


import SalicROVO.getApprovalGrpDetailsROVOImpl;
import SalicROVO.getApprovalSetupDetailsROVOImpl;
import SalicROVO.getApprovalSetupDetailsROVORowImpl;

import SalicROVO.getApprovalGrpDetailsROVORowImpl;
//grpRec
import common.pojo.EmailRequestPojo;

import java.math.BigDecimal;

import oracle.adf.share.ADFContext;

import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;
import java.sql.Date;

import java.util.ArrayList;
import java.util.Map;
import common.GenerateEmailTemplate;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.text.SimpleDateFormat;

import oracle.jbo.server.SequenceImpl;
import oracle.jbo.RowSetIterator;
import oracle.jbo.Row;
import java.util.Calendar;
import java.util.LinkedHashMap;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 19 10:09:29 GST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class overTimeAMImpl extends ApplicationModuleImpl implements overTimeAM {
    /**
     * This is the default constructor (do not remove).
     */
    public overTimeAMImpl() {
    }

    /**
     * Container's getter for XxfndLookupTypesTVO1.
     * @return XxfndLookupTypesTVO1
     */
    public ViewObjectImpl getXxfndLookupTypesTVO1() {
        return (ViewObjectImpl)findViewObject("XxfndLookupTypesTVO1");
    }

    /**
     * Container's getter for XxfndLookupValuesTVO1.
     * @return XxfndLookupValuesTVO1
     */
    public ViewObjectImpl getXxfndLookupValuesTVO1() {
        return (ViewObjectImpl)findViewObject("XxfndLookupValuesTVO1");
    }

    /**
     * Container's getter for XxhcmOvertimeDetailsAllVO1.
     * @return XxhcmOvertimeDetailsAllVO1
     */
    public ViewObjectImpl getXxhcmOvertimeDetailsAllVO1() {
        return (ViewObjectImpl) findViewObject("XxhcmOvertimeDetailsAllVO1");
    }

    /**
     * Container's getter for XxhcmOvertimeHeadersAllVO1.
     * @return XxhcmOvertimeHeadersAllVO1
     */
    public ViewObjectImpl getXxhcmOvertimeHeadersAllVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmOvertimeHeadersAllVO1");
    }

    /**
     * Container's getter for XxhcmOvertimeDetailsAllVO2.
     * @return XxhcmOvertimeDetailsAllVO2
     */
    public ViewObjectImpl getXxhcmOvertimeDetailsAllVO2() {
        return (ViewObjectImpl) findViewObject("XxhcmOvertimeDetailsAllVO2");
    }

    /**
     * Container's getter for XxQpActionHistoryTVO1.
     * @return XxQpActionHistoryTVO1
     */
    public ViewObjectImpl getXxQpActionHistoryTVO1() {
        return (ViewObjectImpl)findViewObject("XxQpActionHistoryTVO1");
    }

    /**
     * Container's getter for otHdrROVO1.
     * @return otHdrROVO1
     */
    public ViewObjectImpl getotHdrROVO1() {
        return (ViewObjectImpl)findViewObject("otHdrROVO1");
    }

    /**
     * Container's getter for XxhcmMasterAttachment_VO2.
     * @return XxhcmMasterAttachment_VO2
     */
    public ViewObjectImpl getXxhcmMasterAttachment_VO2() {
        return (ViewObjectImpl)findViewObject("XxhcmMasterAttachment_VO2");
    }

    /**
     * Container's getter for XxhcmOvertimeHeadersAllVO2.
     * @return XxhcmOvertimeHeadersAllVO2
     */
    public ViewObjectImpl getXxhcmOvertimeHeadersAllVO2() {
        return (ViewObjectImpl)findViewObject("XxhcmOvertimeHeadersAllVO2");
    }

    /**
     * Container's getter for absenceROVO1.
     * @return absenceROVO1
     */
    public ViewObjectImpl getabsenceROVO1() {
        return (ViewObjectImpl)findViewObject("absenceROVO1");
    }

    /**
     * Container's getter for childValidationROVO1.
     * @return childValidationROVO1
     */
    public ViewObjectImpl getchildValidationROVO1() {
        return (ViewObjectImpl)findViewObject("childValidationROVO1");
    }

    /**
     * Container's getter for childSemROVO1.
     * @return childSemROVO1
     */
    public ViewObjectImpl getchildSemROVO1() {
        return (ViewObjectImpl)findViewObject("childSemROVO1");
    }

    /**
     * Container's getter for childSemCheckROVO1.
     * @return childSemCheckROVO1
     */
    public ViewObjectImpl getchildSemCheckROVO1() {
        return (ViewObjectImpl)findViewObject("childSemCheckROVO1");
    }

    /**
     * Container's getter for hireROVO1.
     * @return hireROVO1
     */
    public ViewObjectImpl gethireROVO1() {
        return (ViewObjectImpl)findViewObject("hireROVO1");
    }

    /**
     * Container's getter for ethnicROVO1.
     * @return ethnicROVO1
     */
    public ViewObjectImpl getethnicROVO1() {
        return (ViewObjectImpl)findViewObject("ethnicROVO1");
    }

    /**
     * Container's getter for salaryROVO1.
     * @return salaryROVO1
     */
    public ViewObjectImpl getsalaryROVO1() {
        return (ViewObjectImpl)findViewObject("salaryROVO1");
    }

    /**
     * Container's getter for overtimeHdrDtl1.
     * @return overtimeHdrDtl1
     */
    public ViewLinkImpl getovertimeHdrDtl1() {
        return (ViewLinkImpl)findViewLink("overtimeHdrDtl1");
    }

    /**
     * Container's getter for reqHdrActionHisVL1.
     * @return reqHdrActionHisVL1
     */
    public ViewLinkImpl getreqHdrActionHisVL1() {
        return (ViewLinkImpl)findViewLink("reqHdrActionHisVL1");
    }

    /**
     * Container's getter for OverTimeMaster_Attachment_VL1.
     * @return OverTimeMaster_Attachment_VL1
     */
    public ViewLinkImpl getOverTimeMaster_Attachment_VL1() {
        return (ViewLinkImpl)findViewLink("OverTimeMaster_Attachment_VL1");
    }
    public void insertRecords(){
        this.getXxhcmOvertimeHeadersAllVO1().createRow();
        if ("ot".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("page"))) {
            
        }
        else{
            this.getXxhcmOvertimeDetailsAllVO2().createRow();
        }
       
    }

    /**
     * Container's getter for getOverTimeHdrId_ROVO1.
     * @return getOverTimeHdrId_ROVO1
     */
    public ViewObjectImpl getgetOverTimeHdrId_ROVO1() {
        return (ViewObjectImpl)findViewObject("getOverTimeHdrId_ROVO1");
    }

    /**
     * Container's getter for XxhcmPurposeOfTrvl_VO2.
     * @return XxhcmPurposeOfTrvl_VO2
     */
    public XxhcmPurposeOfTrvl_VOImpl getXxhcmPurposeOfTrvl_VO2() {
        return (XxhcmPurposeOfTrvl_VOImpl) findViewObject("XxhcmPurposeOfTrvl_VO2");
    }

    /**
     * Container's getter for XxhcmPurposeOfTrvl_VO1.
     * @return XxhcmPurposeOfTrvl_VO1
     */
    public XxhcmPurposeOfTrvl_VOImpl getXxhcmPurposeOfTrvl_VO1() {
        return (XxhcmPurposeOfTrvl_VOImpl) findViewObject("XxhcmPurposeOfTrvl_VO1");
    }

    /**
     * Container's getter for XxhcmPurposeOfTrvl_VO3.
     * @return XxhcmPurposeOfTrvl_VO3
     */
    public XxhcmPurposeOfTrvl_VOImpl getXxhcmPurposeOfTrvl_VO3() {
        return (XxhcmPurposeOfTrvl_VOImpl) findViewObject("XxhcmPurposeOfTrvl_VO3");
    }

    /**
     * Container's getter for XxhcmOtherExpenseTVO1.
     * @return XxhcmOtherExpenseTVO1
     */
    public XxhcmOtherExpenseTVOImpl getXxhcmOtherExpenseTVO1() {
        return (XxhcmOtherExpenseTVOImpl) findViewObject("XxhcmOtherExpenseTVO1");
    }

    /**
     * Container's getter for XxhcmAttachmentsTVO1.
     * @return XxhcmAttachmentsTVO1
     */
    public ViewObjectImpl getXxhcmAttachmentsTVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmAttachmentsTVO1");
    }

    /**
     * Container's getter for OnValidateStartDateEndDateROVO1.
     * @return OnValidateStartDateEndDateROVO1
     */
    public ViewObjectImpl getOnValidateStartDateEndDateROVO1() {
        return (ViewObjectImpl)findViewObject("OnValidateStartDateEndDateROVO1");
    }

    /**
     * Container's getter for OverTimeDetPurposeOfTrvlVL1.
     * @return OverTimeDetPurposeOfTrvlVL1
     */
    public ViewLinkImpl getOverTimeDetPurposeOfTrvlVL1() {
        return (ViewLinkImpl)findViewLink("OverTimeDetPurposeOfTrvlVL1");
    }

    /**
     * Container's getter for OverTimeDetPurposeOfTrvlVL2.
     * @return OverTimeDetPurposeOfTrvlVL2
     */
    public ViewLinkImpl getOverTimeDetPurposeOfTrvlVL2() {
        return (ViewLinkImpl)findViewLink("OverTimeDetPurposeOfTrvlVL2");
    }

    /**
     * Container's getter for OverTimeDetPurposeOfTrvlVL3.
     * @return OverTimeDetPurposeOfTrvlVL3
     */
    public ViewLinkImpl getOverTimeDetPurposeOfTrvlVL3() {
        return (ViewLinkImpl)findViewLink("OverTimeDetPurposeOfTrvlVL3");
    }

    /**
     * Container's getter for OverTimeDet_OtherExpenseVL1.
     * @return OverTimeDet_OtherExpenseVL1
     */
    public ViewLinkImpl getOverTimeDet_OtherExpenseVL1() {
        return (ViewLinkImpl)findViewLink("OverTimeDet_OtherExpenseVL1");
    }

    /**
     * Container's getter for OtherExpense_AttachmentVl1.
     * @return OtherExpense_AttachmentVl1
     */
    public ViewLinkImpl getOtherExpense_AttachmentVl1() {
        return (ViewLinkImpl)findViewLink("OtherExpense_AttachmentVl1");
    }

    /**
     * Container's getter for CheckEmployeeReqExistsROVO1.
     * @return CheckEmployeeReqExistsROVO1
     */
    public ViewObjectImpl getCheckEmployeeReqExistsROVO1() {
        return (ViewObjectImpl) findViewObject("CheckEmployeeReqExistsROVO1");
    }

    /**
     * Container's getter for ValidateSalAdvROVO1.
     * @return ValidateSalAdvROVO1
     */
    public ValidateSalAdvROVOImpl getValidateSalAdvROVO1() {
        return (ValidateSalAdvROVOImpl) findViewObject("ValidateSalAdvROVO1");
    }

    /**
     * Container's getter for GetTicketTypeROVO1.
     * @return GetTicketTypeROVO1
     */
    public ViewObjectImpl getGetTicketTypeROVO1() {
        return (ViewObjectImpl) findViewObject("GetTicketTypeROVO1");
    }
    
    public String getAirTicketType(String grade,String dest){
        String arTcTyp = null;
        ViewObject vo  = getGetTicketTypeROVO1();
        vo.setNamedWhereClauseParam("bind_dest", dest);
        vo.setNamedWhereClauseParam("bind_grade", grade);
        vo.executeQuery();
        if(vo.hasNext()){
            arTcTyp = (String) vo.first().getAttribute("TicketType");
        }
        return arTcTyp;
    }
    
    public String getOTGradeEligibility(String grade){
        String vFlag = null;
        ViewObject vo  = getGetValidGradesForOTReqROVO1();
        vo.setNamedWhereClauseParam("bind_grade", grade);
        vo.executeQuery();
        
        if(vo.hasNext()){
            vFlag = (String) vo.first().getAttribute("ValueFlag");
        }
        return vFlag;
    }

    /**
     * Container's getter for GetValidGradesForOTReqROVO1.
     * @return GetValidGradesForOTReqROVO1
     */
    public ViewObjectImpl getGetValidGradesForOTReqROVO1() {
        return (ViewObjectImpl) findViewObject("GetValidGradesForOTReqROVO1");
    }

    /**
     * Container's getter for getPerDMRatesROVO1.
     * @return getPerDMRatesROVO1
     */
    public ViewObjectImpl getgetPerDMRatesROVO1() {
        return (ViewObjectImpl) findViewObject("getPerDMRatesROVO1");
    }

    /**
     * Container's getter for GetCurrencyROVO1.
     * @return GetCurrencyROVO1
     */
    public ViewObjectImpl getGetCurrencyROVO1() {
        return (ViewObjectImpl) findViewObject("GetCurrencyROVO1");
    }
    
    public Number getPerDMRate(String dest,String grade){
        Number dmrate = null;
        ViewObject vo  = getgetPerDMRatesROVO1();
        vo.setNamedWhereClauseParam("bind_dest", dest);
        vo.setNamedWhereClauseParam("bind_grade", grade);
        vo.executeQuery();
        if(vo.hasNext()){
            dmrate = (Number) vo.first().getAttribute("Perdiem");
        }
        
        return dmrate;
    }
    public Number getCurrwncyRate(String fromcurr,String grade){
        Number dmrate = null;
        ViewObject vo  = getGetCurrencyROVO1();
        vo.setNamedWhereClauseParam("bind_from", fromcurr);
        
        vo.executeQuery();
        if(vo.hasNext()){
            dmrate = (Number) vo.first().getAttribute("ConversionRate");
        }
        
        return dmrate;
    }

    /**
     * Container's getter for CheckGradeAllowanceVO1.
     * @return CheckGradeAllowanceVO1
     */
    public CheckGradeAllowanceVOImpl getCheckGradeAllowanceVO1() {
        return (CheckGradeAllowanceVOImpl) findViewObject("CheckGradeAllowanceVO1");
    }
    
    public BigDecimal fetchMaxAmountForEmployee(BigDecimal empId){
        CheckGradeAllowanceVOImpl gradeVO = getCheckGradeAllowanceVO1();
        gradeVO.setbindEmpId(empId);
        gradeVO.executeQuery();
        if(gradeVO.getEstimatedRowCount() > 0){
            return (BigDecimal) gradeVO.first().getAttribute("MaxAmount");
        }
        else{
            return null;
        }
    }
    
    public BigDecimal fetchAvlAmountForChild(BigDecimal childId, Date invDate, BigDecimal maxAmt){
        CheckClaimedAmountVOImpl claimedVO = getCheckClaimedAmountVO1();
        if(invDate != null && childId != null){
            SimpleDateFormat sdf = new SimpleDateFormat("MM");
            String monthStr = sdf.format(invDate);
            int month = Integer.parseInt(monthStr);
            sdf = new SimpleDateFormat("yyyy");
            String yearStr = sdf.format(invDate);
            int year = Integer.parseInt(yearStr);
            Integer startYear = 0;
            Integer endYear = 0;
            if(month >= 9){
                startYear = year;
                endYear = year+1;
            }
            else{
                startYear = year-1;
                endYear = year;
            }
            claimedVO.setbindStartDate("01-09-"+startYear);
            claimedVO.setbindEndDate("31-08-"+endYear);
            claimedVO.setbindChildId(childId);
            claimedVO.executeQuery();
            if(claimedVO.getEstimatedRowCount() > 0){
                BigDecimal claimedAmt = (BigDecimal) claimedVO.first().getAttribute("ClaimedAmount");
                if(maxAmt != null && claimedAmt != null)
                    return maxAmt.subtract(claimedAmt);
            }
            else{
                return maxAmt;
            }
        }
        return maxAmt;
    }

    /**
     * Container's getter for CheckClaimedAmountVO1.
     * @return CheckClaimedAmountVO1
     */
    public CheckClaimedAmountVOImpl getCheckClaimedAmountVO1() {
        return (CheckClaimedAmountVOImpl) findViewObject("CheckClaimedAmountVO1");
    }

    /**
     * Container's getter for CheckChildsForEmployeeInYearVO1.
     * @return CheckChildsForEmployeeInYearVO1
     */
    public CheckChildsForEmployeeInYearVOImpl getCheckChildsForEmployeeInYearVO1() {
        return (CheckChildsForEmployeeInYearVOImpl) findViewObject("CheckChildsForEmployeeInYearVO1");
    }
    
    public Boolean validateThreeChildsPerYear(BigDecimal empId, Date invDate, BigDecimal childId){
        CheckChildsForEmployeeInYearVOImpl childsVO = getCheckChildsForEmployeeInYearVO1();
        childsVO.setbindEmpId(empId);
        if(invDate != null && empId != null && childId != null){
            Calendar cal = Calendar.getInstance();
            cal.setTime(invDate);
            int month = cal.get(Calendar.MONTH);
            int year = cal.get(Calendar.YEAR);
            Integer startYear = 0;
            Integer endYear = 0;
            if(month >= 9){
                startYear = year;
                endYear = year+1;
            }
            else{
                startYear = year-1;
                endYear = year;
            }
            childsVO.setbindStartDate("01-09-"+startYear);
            childsVO.setbindEndDate("31-08-"+endYear);
            childsVO.executeQuery();
            if(childsVO.getEstimatedRowCount() > 0){
                oracle.jbo.Row[] rows = childsVO.getFilteredRows("ChildId", childId);
                if(rows != null && rows.length == 0){
                    if(childsVO.getEstimatedRowCount() == 3){
                        return Boolean.FALSE;
                    }
                }
            }
        }
        return Boolean.TRUE;
    }
    
    public ArrayList fetchCurrentChildsInYear(BigDecimal empId){
        ArrayList childsList = new ArrayList();
        CheckChildsForEmployeeInYearVOImpl childsVO = getCheckChildsForEmployeeInYearVO1();
        childsVO.setbindEmpId(empId);
        if(empId != null){
            Calendar cal = Calendar.getInstance();
            int month = cal.get(Calendar.MONTH);
            int year = cal.get(Calendar.YEAR);
            Integer startYear = 0;
            Integer endYear = 0;
            if(month >= 9){
                startYear = year;
                endYear = year+1;
            }
            else{
                startYear = year-1;
                endYear = year;
            }
            childsVO.setbindStartDate("01-09-"+startYear);
            childsVO.setbindEndDate("31-08-"+endYear);
            childsVO.executeQuery();
            if(childsVO.getEstimatedRowCount() > 0){
                RowSetIterator rs = childsVO.createRowSetIterator(null);
                while(rs.hasNext()){
                    Row row = rs.next();
                    childsList.add(row.getAttribute("ChildId"));
                }
            }
        }
        return childsList;
    }

    /**
     * Container's getter for EmpReqTypeApprListROVO1.
     * @return EmpReqTypeApprListROVO1
     */
    public ViewObjectImpl getEmpReqTypeApprListROVO1() {
        return (ViewObjectImpl) findViewObject("EmpReqTypeApprListROVO1");
    }
    
    public String getDecodedReqType(String reqType){
        String reqty = null;
        if(reqType.equalsIgnoreCase("ot"))
            return "OVER_TIME";       
        if(reqType.equalsIgnoreCase("salary"))
            return "SAL_ADV";
        if(reqType.equalsIgnoreCase("BusinessTrip"))
            return "BUSINESS_TRIP";
        if(reqType.equalsIgnoreCase("BusinessTripCompletion"))
            return "BUSINESS_TRIP_COM";
        if(reqType.equalsIgnoreCase("edu"))
            return "EDU_ALL";
        if(reqType.equalsIgnoreCase("letter"))
            return "HR_LETTER";
        if(reqType.equalsIgnoreCase("vacation"))
            return "VAC_ALL";
        if(reqType.equalsIgnoreCase("house"))
            return "HOUSE_ADV";
        
        //house
        
        return reqty;
    }
    
    
    public String getJobLevel(oracle.jbo.domain.Number empId){
        Integer jobLevelInt = null;
        String JobLevel = null;
        ViewObject empJobLev = getGetJobLevelROVO1();
        empJobLev.setNamedWhereClauseParam("p_emp_id", empId.bigDecimalValue());
        empJobLev.executeQuery();
        if(empJobLev.hasNext()){
            return (String)empJobLev.first().getAttribute("JobLevel");            
        }
        return null;
    }
    
    public void updateApproverStatus(){
        String jobLevel = getJobLevel((oracle.jbo.domain.Number)getXxhcmOvertimeHeadersAllVO1().getCurrentRow().getAttribute("EmpId"));
        
        String sqlStr = "update XX_QP_ACTION_HISTORY_T set approver_flag = 'A' and LAST_UPDATE_DATE = sysdate where header_id = "+getXxhcmOvertimeHeadersAllVO1().getCurrentRow().getAttribute("ReqId");
        String sqlStr1 = "update XX_QP_ACTION_HISTORY_T set LAST_UPDATE_DATE = sysdate where APPROVE_LEVEL = 1 and header_id = "+getXxhcmOvertimeHeadersAllVO1().getCurrentRow().getAttribute("ReqId");
        //Date = new Date();
        if(jobLevel.equalsIgnoreCase("0")){
            RowSetIterator rsi = getXxQpActionHistoryTVO1().createRowSetIterator(null);
            while(rsi.hasNext()){
                rsi.next().setAttribute("ApproverFlag", "A");
                rsi.next().setAttribute("LastUpdateDate", new java.sql.Timestamp(System.currentTimeMillis()));
                //new java.sql.date(system.currenttimemillis())                
            }
            rsi.closeRowSetIterator();
        }else{
            RowSetIterator rsi = getXxQpActionHistoryTVO1().createRowSetIterator(null);
            rsi.reset();
            rsi.reset();
            while(rsi.hasNext()){
                Row row = rsi.next();
                //row.setAttribute("ApproverFlag", "A");
                BigDecimal level = (BigDecimal)row.getAttribute("ApproveLevel");
                if(level.compareTo(new BigDecimal(1)) == 0)
                row.setAttribute("LastUpdateDate", new java.sql.Timestamp(System.currentTimeMillis()));
                //new java.sql.date(system.currenttimemillis())                
            }
            rsi.closeRowSetIterator();
            
        }
        
    }
    
    public void updateAutoApprove(oracle.jbo.domain.Number empId){
        Integer jobLevelInt = null;
        String JobLevel = null;
        ViewObject empJobLev = getGetJobLevelROVO1();
        empJobLev.setNamedWhereClauseParam("p_emp_id", empId.bigDecimalValue());
        empJobLev.executeQuery();
        if(empJobLev.hasNext()){
            JobLevel =  (String)empJobLev.first().getAttribute("JobLevel");
            jobLevelInt = Integer.parseInt(JobLevel);
        }
        if(jobLevelInt == 0){
            String reqType = getStringBasedOnReqType((String)getXxhcmOvertimeHeadersAllVO1().getCurrentRow().getAttribute("ReqType"));
                String empNameR = getStringBasedOnReqType((String)getXxhcmOvertimeHeadersAllVO1().getCurrentRow().getAttribute("ReqType"));
           getXxhcmOvertimeHeadersAllVO1().getCurrentRow().setAttribute("Status", "APPROVE"); 
                EmailRequestPojo emailReq = new EmailRequestPojo();
            String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
            emailReq.setToEmail(to);
                emailReq.setRequestNo((String)getXxhcmOvertimeHeadersAllVO1().getCurrentRow().getAttribute("RequestNumber"));
            emailReq.setToEmpName(emailReq.getEmpName());
            emailReq.setSubject("Your "+reqType+" request("+emailReq.getRequestNo()+") is approved.");
            emailReq.setMessage("Your <b> "+reqType+" request </b> is approved with hereunder information:");
            LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
            actionButtons = new LinkedHashMap<String, String>();
            actionButtons.put("More Info", "");
            emailReq.setActionButtons(actionButtons);
            Map<String, String> emailHapmap =
                GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
            emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

            //Code for Sending email for second approver
            GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
            //empNameR
                try {
                    sendFYINotification(emailReq.getRequestNo(), new oracle.jbo.domain.Number(emailReq.getEmpId()),
                                        reqType, new oracle.jbo.domain.Number(emailReq.getRequestId()), empNameR);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        
        
    }
        
    public void sendFYINotification(String reqNumber,oracle.jbo.domain.Number empId,String reqType,oracle.jbo.domain.Number req_id,String empRName){
        BigDecimal empIdB = empId.bigDecimalValue();
        int apprSeqNew = 0;
        ViewObject approvSetup = getgetApprovalSetupDetailsROVO1();
        approvSetup.setNamedWhereClauseParam("p_appr_type", "FYI");
        approvSetup.setNamedWhereClauseParam("p_req_type", getDecodedReqType(reqType));
        approvSetup.executeQuery();
        RowSetIterator rsi  = null;
        RowSetIterator rsigrpDet = null;
        Integer jobLevelInt = null;
        String JobLevel = null;
        ViewObject empJobLev = getGetJobLevelROVO1();
        empJobLev.setNamedWhereClauseParam("p_emp_id", empIdB);
        empJobLev.executeQuery();
        if(empJobLev.hasNext()){
            JobLevel =  (String)empJobLev.first().getAttribute("JobLevel");
            jobLevelInt = Integer.parseInt(JobLevel);
        }
        try {
            rsi = approvSetup.createRowSetIterator("apprSetup");
            rsi.reset();
            while (rsi.hasNext()) {
                getApprovalSetupDetailsROVORowImpl apprSetRow = (getApprovalSetupDetailsROVORowImpl)rsi.next();
                BigDecimal ApprLevel = apprSetRow.getApprLevel();
                BigDecimal ApprGroupId= apprSetRow.getApprGroupId();
                BigDecimal CustApprGroupId= apprSetRow.getCustApprGroupId();
                BigDecimal managerId = null;
                String managerName = null;
                //Superwiser
                if(ApprGroupId.compareTo(new BigDecimal(100012)) == 0){
                    ViewObject empManager = getGetManagerDetailsROVO1();
                    empManager.setNamedWhereClauseParam("p_emp_id", empIdB);
                    empManager.executeQuery();
                    if(empManager.hasNext()){
                        managerId =  (BigDecimal)empManager.first().getAttribute("ManagerId");
                        //BV_EMP_ID
                        ViewObject empManagerDet = getemployeeROVO1();
                        empManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                        empManagerDet.executeQuery();
                        if(empManagerDet.hasNext()){
                            managerName =(String)empManagerDet.first().getAttribute("EmpName");
                        }
                        String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
                        EmailRequestPojo emailReq = new EmailRequestPojo();
                        emailReq.setRequestNo(reqNumber);
                        emailReq.setToEmail(to);
                        emailReq.setToEmpName(managerName);
                        emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") is approved successfully.");
                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") for "+empRName+", is approved successfully. This is for your information Only.");
                        LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons.put("More Info", "");
                        emailReq.setActionButtons(actionButtons);
                        Map<String, String> emailHapmap =
                            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                        //Code for Sending email for second approver
                        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
    //                        Row vonew = getXxQpActionHistoryTVO1().createRow();
    //                        //xx_qp_action_history_s
    //                        apprSeqNew = apprSeqNew + 1;
    //                        SequenceImpl si = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
    //                        vonew.setAttribute("ActionHistoryId", si.getSequenceNumber());
    //                        vonew.setAttribute("HeaderId", req_id.bigDecimalValue());
    //                        vonew.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
    //                        vonew.setAttribute("ApproverId", managerId);
    //                        vonew.setAttribute("ApproverUserName", managerName);
    //                        vonew.setAttribute("ApproverComments", null);
    //                        vonew.setAttribute("ApproverFlag", null);
    //
    //                        vonew.setAttribute("Type", "H");
    //                        vonew.setAttribute("Page", getStringBasedOnReqType(reqType));
    //                        vonew.setAttribute("ApprType", "Approval");
    //                        vonew.setAttribute("CreatedBy", empIdB.toString());
    //                        //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
    //                        vonew.setAttribute("LastUpdatedBy", empIdB.toString());
    //                        //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
    //                        vonew.setAttribute("LastUpdateLogin", empIdB.toString());
    //                        //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show
    //                        vonew.setAttribute("ReqNumber", reqNumber);
    //                        getXxQpActionHistoryTVO1().insertRow(vonew);
                        
                        if(jobLevelInt == 2){     
                            
                            ViewObject empSManager = getGetManagerDetailsROVO1();
                            empSManager.setNamedWhereClauseParam("p_emp_id", managerId);
                            empSManager.executeQuery();
                            if(empSManager.hasNext()){
                                managerId =  (BigDecimal)empSManager.first().getAttribute("ManagerId");
                                //BV_EMP_ID
                                ViewObject empSManagerDet = getemployeeROVO1();
                                empSManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                                empSManagerDet.executeQuery();
                                if(empSManagerDet.hasNext()){
                                    managerName =(String)empSManagerDet.first().getAttribute("EmpName");
                                }else{
                                    managerName = null;
                                }
    //                                Row vonew1 = getXxQpActionHistoryTVO1().createRow();
    //                                //xx_qp_action_history_s
    //                                apprSeqNew = apprSeqNew + 1;
    //                                SequenceImpl si1 = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
    //                                vonew1.setAttribute("ActionHistoryId", si1.getSequenceNumber());
    //                                vonew1.setAttribute("HeaderId", req_id.bigDecimalValue());
    //                                vonew1.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
    //                                vonew1.setAttribute("ApproverId", managerId);
    //                                vonew1.setAttribute("ApproverUserName", managerName);
    //                                vonew1.setAttribute("ApproverComments", null);
    //                                vonew1.setAttribute("ApproverFlag", null);
    //
    //                                vonew1.setAttribute("Type", "H");
    //                                vonew1.setAttribute("Page", getStringBasedOnReqType(reqType));
    //                                vonew1.setAttribute("ApprType", "Approval");
    //                                vonew1.setAttribute("CreatedBy", empIdB.toString());
    //                                //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
    //                                vonew1.setAttribute("LastUpdatedBy", empIdB.toString());
    //                                //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
    //                                vonew1.setAttribute("LastUpdateLogin", empIdB.toString());
    //                                //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show
    //                                vonew1.setAttribute("ReqNumber", reqNumber);
    //                                getXxQpActionHistoryTVO1().insertRow(vonew1);
                        //String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
                        emailReq = new EmailRequestPojo();
                        emailReq.setToEmail(to);
                                emailReq.setRequestNo(reqNumber);
                        emailReq.setToEmpName(managerName);
                        emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") is approved successfully.");
                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") for "+empRName+", is approved successfully. This is for your information Only.");
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons.put("More Info", "");
                        emailReq.setActionButtons(actionButtons);
                        emailHapmap =
                            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                        //Code for Sending email for second approver
                        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
                            }
                        }
                    }                    
                }
                //Custom Approval group
                if(ApprGroupId.compareTo(new BigDecimal(100011)) == 0){
                    ViewObject approvgrpDet = getgetApprovalGrpDetailsROVO1();
                    approvgrpDet.setNamedWhereClauseParam("p_cust_group_id", CustApprGroupId);
                    approvgrpDet.executeQuery(); 
                    rsigrpDet = approvgrpDet.createRowSetIterator("grp");
                    while(rsigrpDet.hasNext()){
                        getApprovalGrpDetailsROVORowImpl grpRec = (getApprovalGrpDetailsROVORowImpl)rsigrpDet.next();
    //                        Row vonewgrp = getXxQpActionHistoryTVO1().createRow();
    //                        //xx_qp_action_history_s
    //                        apprSeqNew = apprSeqNew + 1;
    //                        SequenceImpl si1 = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
    //                        vonewgrp.setAttribute("ActionHistoryId", si1.getSequenceNumber());
    //                        vonewgrp.setAttribute("HeaderId", req_id.bigDecimalValue());
    //                        vonewgrp.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
    //                        vonewgrp.setAttribute("ApproverId", grpRec.getEmployeeId());
    //                        vonewgrp.setAttribute("ApproverUserName", grpRec.getEmployeeName());
    //                        vonewgrp.setAttribute("ApproverComments", null);
    //                        vonewgrp.setAttribute("ApproverFlag", null);
    //
    //                        vonewgrp.setAttribute("Type", "H");
    //                        vonewgrp.setAttribute("Page", getStringBasedOnReqType(reqType));
    //                        vonewgrp.setAttribute("ApprType", "Approval");
    //                        vonewgrp.setAttribute("CreatedBy", empIdB.toString());
    //                        //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
    //                        vonewgrp.setAttribute("LastUpdatedBy", empIdB.toString());
    //                        //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
    //                        vonewgrp.setAttribute("LastUpdateLogin", empIdB.toString());
    //                        //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show
    //                        vonewgrp.setAttribute("ReqNumber", reqNumber);
    //                        getXxQpActionHistoryTVO1().insertRow(vonewgrp);
                        
                        String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
                        EmailRequestPojo emailReq = new EmailRequestPojo();
                        emailReq.setToEmail(to);
                        emailReq.setRequestNo(reqNumber);
                        emailReq.setToEmpName(grpRec.getEmployeeName());
                        emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") is approved successfully.");
                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") for "+empRName+", is approved successfully. This is for your information Only.");
                        LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons.put("More Info", "");
                        emailReq.setActionButtons(actionButtons);
                        Map<String, String> emailHapmap =
                            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                        //Code for Sending email for second approver
                        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
                    }
                    rsigrpDet.closeRowSetIterator();
                }
            }
            rsi.closeRowSetIterator();
        } catch (Exception e) {
            if(rsi!=null){
                rsi.closeRowSetIterator();  
            }
            if(rsigrpDet!=null){
                rsigrpDet.closeRowSetIterator(); 
            }
        }
    }
    
    public void populateApproversForReqest(String reqNumber,oracle.jbo.domain.Number empId,String reqType,oracle.jbo.domain.Number req_id){
        BigDecimal empIdB = empId.bigDecimalValue();
        int apprSeqNew = 0;
        ViewObject approvSetup = getgetApprovalSetupDetailsROVO1();
        approvSetup.setNamedWhereClauseParam("p_appr_type", "Approval");
        approvSetup.setNamedWhereClauseParam("p_req_type", getDecodedReqType(reqType));
        approvSetup.executeQuery();
        RowSetIterator rsi  = null;
        RowSetIterator rsigrpDet = null;
        Integer jobLevelInt = null;
        String JobLevel = null;
        ViewObject empJobLev = getGetJobLevelROVO1();
        empJobLev.setNamedWhereClauseParam("p_emp_id", empIdB);
        empJobLev.executeQuery();
        if(empJobLev.hasNext()){
            JobLevel =  (String)empJobLev.first().getAttribute("JobLevel");
            jobLevelInt = Integer.parseInt(JobLevel);
        }
        try {
            rsi = approvSetup.createRowSetIterator("apprSetup");
            rsi.reset();
            while (rsi.hasNext()) {
                getApprovalSetupDetailsROVORowImpl apprSetRow = (getApprovalSetupDetailsROVORowImpl)rsi.next();
                BigDecimal ApprLevel = apprSetRow.getApprLevel();
                BigDecimal ApprGroupId= apprSetRow.getApprGroupId();
                BigDecimal CustApprGroupId= apprSetRow.getCustApprGroupId();
                BigDecimal managerId = null;
                String managerName = null;
                //Superwiser
                if(ApprGroupId.compareTo(new BigDecimal(100012)) == 0){
                    ViewObject empManager = getGetManagerDetailsROVO1();
                    empManager.setNamedWhereClauseParam("p_emp_id", empIdB);
                    empManager.executeQuery();
                    if(empManager.hasNext()){
                        managerId =  (BigDecimal)empManager.first().getAttribute("ManagerId");
                        //BV_EMP_ID
                        ViewObject empManagerDet = getemployeeROVO1();
                        empManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                        empManagerDet.executeQuery();
                        if(empManagerDet.hasNext()){
                            managerName =(String)empManagerDet.first().getAttribute("EmpName");
                        }
                        Row vonew = getXxQpActionHistoryTVO1().createRow();
                        //xx_qp_action_history_s
                        apprSeqNew = apprSeqNew + 1;
                        SequenceImpl si = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
                        vonew.setAttribute("ActionHistoryId", si.getSequenceNumber());
                        vonew.setAttribute("HeaderId", req_id.bigDecimalValue());
                        vonew.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
                        vonew.setAttribute("ApproverId", managerId);
                        vonew.setAttribute("ApproverUserName", managerName);
                        vonew.setAttribute("ApproverComments", null);
                        vonew.setAttribute("ApproverFlag", null);
                        if(jobLevelInt == 0)
                        vonew.setAttribute("ApproverFlag", 'A');
                        
                        vonew.setAttribute("Type", "H");
                        vonew.setAttribute("Page", getDecodedReqType(reqType));
                        vonew.setAttribute("ApprType", "Approval");
                        vonew.setAttribute("CreatedBy", empIdB.toString());
                        //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
                        vonew.setAttribute("LastUpdatedBy", empIdB.toString());
                        //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
                        vonew.setAttribute("LastUpdateLogin", empIdB.toString());
                        //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show    
                        vonew.setAttribute("ReqNumber", reqNumber);
                        getXxQpActionHistoryTVO1().insertRow(vonew);
                        
                        if(jobLevelInt == 2){     
                            
                            ViewObject empSManager = getGetManagerDetailsROVO1();
                            empSManager.setNamedWhereClauseParam("p_emp_id", managerId);
                            empSManager.executeQuery();
                            if(empSManager.hasNext()){
                                managerId =  (BigDecimal)empSManager.first().getAttribute("ManagerId");
                                //BV_EMP_ID
                                ViewObject empSManagerDet = getemployeeROVO1();
                                empSManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                                empSManagerDet.executeQuery();
                                if(empSManagerDet.hasNext()){
                                    managerName =(String)empSManagerDet.first().getAttribute("EmpName");
                                }else{
                                    managerName = null;
                                }
                                Row vonew1 = getXxQpActionHistoryTVO1().createRow();
                                //xx_qp_action_history_s
                                apprSeqNew = apprSeqNew + 1;
                                SequenceImpl si1 = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
                                vonew1.setAttribute("ActionHistoryId", si1.getSequenceNumber());
                                vonew1.setAttribute("HeaderId", req_id.bigDecimalValue());
                                vonew1.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
                                vonew1.setAttribute("ApproverId", managerId);
                                vonew1.setAttribute("ApproverUserName", managerName);
                                vonew1.setAttribute("ApproverComments", null);
                                vonew1.setAttribute("ApproverFlag", null);
                                
                                vonew1.setAttribute("Type", "H");
                                vonew1.setAttribute("Page", getDecodedReqType(reqType));
                                vonew1.setAttribute("ApprType", "Approval");
                                vonew1.setAttribute("CreatedBy", empIdB.toString());
                                //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
                                vonew1.setAttribute("LastUpdatedBy", empIdB.toString());
                                //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
                                vonew1.setAttribute("LastUpdateLogin", empIdB.toString());
                                //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show    
                                vonew1.setAttribute("ReqNumber", reqNumber);
                                getXxQpActionHistoryTVO1().insertRow(vonew1);
                            }
                        }
                    }                    
                }
                //Custom Approval group
                if(ApprGroupId.compareTo(new BigDecimal(100011)) == 0){
                    ViewObject approvgrpDet = getgetApprovalGrpDetailsROVO1();
                    approvgrpDet.setNamedWhereClauseParam("p_cust_group_id", CustApprGroupId);
                    approvgrpDet.executeQuery(); 
                    rsigrpDet = approvgrpDet.createRowSetIterator("grp");
                    while(rsigrpDet.hasNext()){
                        getApprovalGrpDetailsROVORowImpl grpRec = (getApprovalGrpDetailsROVORowImpl)rsigrpDet.next();
                        Row vonewgrp = getXxQpActionHistoryTVO1().createRow();
                        //xx_qp_action_history_s
                        apprSeqNew = apprSeqNew + 1;
                        SequenceImpl si1 = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
                        vonewgrp.setAttribute("ActionHistoryId", si1.getSequenceNumber());
                        vonewgrp.setAttribute("HeaderId", req_id.bigDecimalValue());
                        vonewgrp.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
                        vonewgrp.setAttribute("ApproverId", grpRec.getEmployeeId());
                        vonewgrp.setAttribute("ApproverUserName", grpRec.getEmployeeName());
                        vonewgrp.setAttribute("ApproverComments", null);
                        vonewgrp.setAttribute("ApproverFlag", null);
                        if(jobLevelInt == 0)
                        vonewgrp.setAttribute("ApproverFlag", 'A');
                        vonewgrp.setAttribute("Type", "H");
                        vonewgrp.setAttribute("Page", getDecodedReqType(reqType));
                        vonewgrp.setAttribute("ApprType", "Approval");
                        vonewgrp.setAttribute("CreatedBy", empIdB.toString());
                        //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
                        vonewgrp.setAttribute("LastUpdatedBy", empIdB.toString());
                        //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
                        vonewgrp.setAttribute("LastUpdateLogin", empIdB.toString());
                        //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show    
                        vonewgrp.setAttribute("ReqNumber", reqNumber);
                        getXxQpActionHistoryTVO1().insertRow(vonewgrp);                         
                    }
                    rsigrpDet.closeRowSetIterator();
                }
            }
            rsi.closeRowSetIterator();
        } catch (Exception e) {
            if(rsi!=null){
                rsi.closeRowSetIterator();  
            }
            if(rsigrpDet!=null){
                rsigrpDet.closeRowSetIterator(); 
            }
        }
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", reqType);
        //getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id", req_id.bigDecimalValue());
        getXxQpActionHistoryTVO1().executeQuery();
    }
    
    
    
//    public void populateApproversForReqest(String reqNumber,oracle.jbo.domain.Number empId,String reqType,oracle.jbo.domain.Number req_id){
//        ViewObject approvList = getEmpReqTypeApprListROVO1();
//        approvList.setNamedWhereClauseParam("p_EMP_ID", empId);
//        approvList.setNamedWhereClauseParam("p_req_type", getDecodedReqType(reqType));
//        approvList.executeQuery();
//        RowSetIterator rsi = approvList.createRowSetIterator("appr");
//        rsi.reset();
//        while(rsi.hasNext()){
//            Row apprRow = rsi.next();
//            Row vonew = getXxQpActionHistoryTVO1().createRow();
//            //xx_qp_action_history_s
//            SequenceImpl si = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
//            vonew.setAttribute("ActionHistoryId", si.getSequenceNumber());
//            vonew.setAttribute("HeaderId", req_id.bigDecimalValue());
//            vonew.setAttribute("ApproveLevel", apprRow.getAttribute("ApprovalLevel"));
//            vonew.setAttribute("ApproverId", ((oracle.jbo.domain.Number)apprRow.getAttribute("EmpId")).bigDecimalValue());
//            vonew.setAttribute("ApproverUserName", apprRow.getAttribute("EmployeeName"));
//            vonew.setAttribute("ApproverComments", null);
//            vonew.setAttribute("ApproverFlag", null);
//            
//            vonew.setAttribute("Type", "H");
//            vonew.setAttribute("Page", getDecodedReqType(reqType));
//            vonew.setAttribute("ApprType", apprRow.getAttribute("ApprType"));
//            vonew.setAttribute("CreatedBy", "sam");
//            //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
//            vonew.setAttribute("LastUpdatedBy", "sam");
//            //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
//            vonew.setAttribute("LastUpdateLogin", "sam");
//            //ReqNumber	String	REQ_NUMBER	XxQpActionHistoryTEO	Show	
//            vonew.setAttribute("ReqNumber", reqNumber);
//            getXxQpActionHistoryTVO1().insertRow(vonew);
//            
//        }
//        rsi.closeRowSetIterator();                              
//        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", reqType);
//        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id", req_id.bigDecimalValue());
//        getXxQpActionHistoryTVO1().executeQuery();
//    }

    /**
     * Container's getter for getApprovalSetupDetailsROVO1.
     * @return getApprovalSetupDetailsROVO1
     */
    public getApprovalSetupDetailsROVOImpl getgetApprovalSetupDetailsROVO1() {
        return (getApprovalSetupDetailsROVOImpl) findViewObject("getApprovalSetupDetailsROVO1");
    }

    /**
     * Container's getter for getApprovalGrpDetailsROVO1.
     * @return getApprovalGrpDetailsROVO1
     */
    public getApprovalGrpDetailsROVOImpl getgetApprovalGrpDetailsROVO1() {
        return (getApprovalGrpDetailsROVOImpl) findViewObject("getApprovalGrpDetailsROVO1");
    }

    /**
     * Container's getter for GetJobLevelROVO1.
     * @return GetJobLevelROVO1
     */
    public GetJobLevelROVOImpl getGetJobLevelROVO1() {
        return (GetJobLevelROVOImpl) findViewObject("GetJobLevelROVO1");
    }

    /**
     * Container's getter for GetManagerDetailsROVO1.
     * @return GetManagerDetailsROVO1
     */
    public GetManagerDetailsROVOImpl getGetManagerDetailsROVO1() {
        return (GetManagerDetailsROVOImpl) findViewObject("GetManagerDetailsROVO1");
    }

    /**
     * Container's getter for employeeROVO1.
     * @return employeeROVO1
     */
    public ViewObjectImpl getemployeeROVO1() {
        return (ViewObjectImpl) findViewObject("employeeROVO1");
    }
    
    
    
    
    public void prepareMailTemplateAndSend(String approveOrReject) {
        EmailRequestPojo emailReq = new EmailRequestPojo();
        
     
        
        ViewObjectImpl otHdrVO = getXxhcmOvertimeHeadersAllVO1();
        
        String reqType =  getStringBasedOnReqType((String) otHdrVO.getCurrentRow().getAttribute("ReqType"));
        
        emailReq.setRequestId(((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("ReqId")).intValue());
        emailReq.setRequestNo((String) otHdrVO.getCurrentRow().getAttribute("RequestNumber"));
        emailReq.setEmpId(((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("EmpId")).toString());
        //emailReq.setEmpName((String) otHdrVO.getCurrentRow().getAttribute("EmployeeName"));
        ViewObject empManagerDet = getemployeeROVO1();
        empManagerDet.setNamedWhereClauseParam("BV_EMP_ID",((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("EmpId")).toString());
        empManagerDet.executeQuery();
        String empNameR = null;;
        if(empManagerDet.hasNext()){
            empNameR = (String)empManagerDet.first().getAttribute("EmpName");
            emailReq.setEmpName((String)empManagerDet.first().getAttribute("EmpName"));
        }

        ArrayList<String> toRecepients = new ArrayList<String>();
        
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", getDecodedReqType((String) otHdrVO.getCurrentRow().getAttribute("ReqType")));
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id",(((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("ReqId")).bigDecimalValue()) );
        getXxQpActionHistoryTVO1().executeQuery();
        
        BigDecimal empId = (((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("EmpId")).bigDecimalValue());
        
        BigDecimal approveLevel = null;
        String firstLevelApproverName = "";
        String secondLevelApproverName = "";
        String rejectReason = "";
        
        ArrayList<String> tableContentCols = new ArrayList<String>();
        LinkedHashMap<String, String> tableColumnDatatypes = null;
        String reqPage = (String) otHdrVO.getCurrentRow().getAttribute("ReqType");
        
        if (reqPage.equalsIgnoreCase("ot")) {
            tableContentCols.add("Over Time Date");
            tableContentCols.add("Over Time Type");
            tableContentCols.add("Over Time Hours");
            tableContentCols.add("Calculated Hours");
            tableContentCols.add("Description");

            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select OVERTIME_DATE,OVERTIME_TYPE,OVERTIME_HOURS,CALCULATED_HOURS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("OVERTIME_DATE", "DATE");
            tableColumnDatatypes.put("OVERTIME_TYPE", "STRING");
            tableColumnDatatypes.put("OVERTIME_HOURS", "STRING");
            tableColumnDatatypes.put("CALCULATED_HOURS", "STRING");
            tableColumnDatatypes.put("MISSIONS", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);

        }
        if(approveOrReject != null && "A".equalsIgnoreCase(approveOrReject)){
       
        
        Row[] rows = getXxQpActionHistoryTVO1().getFilteredRows("ApproverId", empId.toString());
        if(rows != null && rows.length > 0){
            approveLevel = (BigDecimal)rows[0].getAttribute("ApproveLevel");
            firstLevelApproverName = (String) rows[0].getAttribute("ApproverUserName");
            rejectReason = (String)rows[0].getAttribute("ApproverComments");
            BigDecimal nextLevel = approveLevel.add(new BigDecimal(1));
            rows = getXxQpActionHistoryTVO1().getFilteredRows("ApproveLevel", nextLevel);
            if(rows != null && rows.length > 0){
                //next level approver is present.
                secondLevelApproverName = (String) rows[0].getAttribute("ApproverUserName");
                
                //sending email to employee about first level approval complete and nexi is pending
                
                String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
                emailReq.setToEmail(to);
                emailReq.setToEmpName(emailReq.getEmpName());
                //                    emailReq.setToEmail((String[]) toRecepients.toArray());

                emailReq.setSubject("Your "+reqType+" request("+emailReq.getRequestNo()+") is approved from "+firstLevelApproverName+"  pending with "+secondLevelApproverName);
                emailReq.setMessage("Your <b> "+reqType+" request </b>is pending for approval from <b>"+secondLevelApproverName+" </b> with hereunder information:");
               
                
                LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                actionButtons.put("More Info", "");
                emailReq.setActionButtons(actionButtons);
                
                Map<String, String> emailHapmap =
                    GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                //Code for Sending email to employee about first level approval complete and nexi is pending
                GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
                
                //To second approver
               String[] managerUsers = { "paas.user@salic.com" }; //TODO get manager email 
               String mgrUserName = secondLevelApproverName;
               emailReq.setToEmpName(mgrUserName);
               emailReq.setToEmail(managerUsers);
               emailReq.setSubject("Action required for "+ reqType +" request ("+emailReq.getRequestNo()+") of "+emailReq.getEmpName());
               emailReq.setMessage("<b> "+ reqType +
                                   " request </b> for <b>"+emailReq.getEmpName()+ "("+emailReq.getEmpId()+") </b> is pending for your approval with hereunder details:");
               actionButtons = new LinkedHashMap<String, String>();
               actionButtons.put("Approve", "");
               actionButtons.put("Reject", "");
               actionButtons.put("More Info", "");
               emailReq.setActionButtons(actionButtons);
               emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

               //Code for Sending email for second approver
               GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
                
            }
            else{
                
                String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
                emailReq.setToEmail(to);
                emailReq.setToEmpName(emailReq.getEmpName());
                emailReq.setSubject("Your "+reqType+" request("+emailReq.getRequestNo()+") is approved.");
                emailReq.setMessage("Your <b> "+reqType+" request </b> is approved with hereunder information:");
                LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                actionButtons = new LinkedHashMap<String, String>();
                actionButtons.put("More Info", "");
                emailReq.setActionButtons(actionButtons);
                Map<String, String> emailHapmap =
                    GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                //Code for Sending email for second approver
                GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
                //empNameR
                    try {
                        sendFYINotification(emailReq.getRequestNo(), new oracle.jbo.domain.Number(emailReq.getEmpId()),
                                            reqPage, new oracle.jbo.domain.Number(emailReq.getRequestId()), empNameR);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
        }
        }
        else if(approveOrReject != null && "R".equalsIgnoreCase(approveOrReject)){
            String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
            emailReq.setToEmail(to);
            emailReq.setToEmpName(emailReq.getEmpName());
            emailReq.setSubject("Your "+reqType+" request("+emailReq.getRequestNo()+") is rejected.");
            emailReq.setMessage("Your <b> "+reqType+" request </b> is rejected with hereunder information: <br> Reject Reason : "+rejectReason);
            LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
            actionButtons = new LinkedHashMap<String, String>();
            actionButtons.put("More Info", "");
            emailReq.setActionButtons(actionButtons);
            Map<String, String> emailHapmap =
                GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
            emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

            //Code for Sending email for second approver
            GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
        }
    }

    public void prepareMailTemplateAndSend() {
        EmailRequestPojo emailReq = new EmailRequestPojo();
        
        String reqType =  getStringBasedOnReqType((String) ADFContext.getCurrent().getSessionScope()
                                                                               .get("page"));
        
        ViewObjectImpl otHdrVO = getXxhcmOvertimeHeadersAllVO1();
        emailReq.setRequestId(((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("ReqId")).intValue());
        emailReq.setRequestNo((String) otHdrVO.getCurrentRow().getAttribute("RequestNumber"));
        emailReq.setEmpId(((oracle.jbo.domain.Number) otHdrVO.getCurrentRow().getAttribute("EmpId")).stringValue());
        emailReq.setEmpName((String) otHdrVO.getCurrentRow().getAttribute("employeeNameTRANS"));

        ArrayList<String> toRecepients = new ArrayList<String>();
        
//        getXxQpActionHistoryTVO1().executeQuery();
        
        String approverName = "";
        
        Row[] rows = getXxQpActionHistoryTVO1().getFilteredRows("ApproveLevel", new BigDecimal(1));
        if(rows != null && rows.length > 0){
            for(Row row : rows){
                approverName = (String)row.getAttribute("ApproverUserName");
                toRecepients.add((String)row.getAttribute("ApproverUserName"));
            }
        }
        
        
        String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
        emailReq.setToEmail(to);
        emailReq.setToEmpName(emailReq.getEmpName());
        //                    emailReq.setToEmail((String[]) toRecepients.toArray());

        emailReq.setMessage("Your <b> " + reqType + " request" +
                            "</b> is submitted and pending for approval from "+approverName+" with hereunder information:");
        emailReq.setSubject("Your " + reqType + "request (" + emailReq.getRequestNo() + ")"+
                            " is submitted and pending from approval from "+approverName);
        LinkedHashMap<String, String> tableColumnDatatypes = null;
        String reqPage = (String) ADFContext.getCurrent()
                                            .getSessionScope()
                                            .get("page");
        ArrayList<String> tableContentCols = new ArrayList<String>();
        if (reqPage.equalsIgnoreCase("ot")) {
            tableContentCols.add("Over Time Date");
            tableContentCols.add("Over Time Type");
            tableContentCols.add("Over Time Hours");
            tableContentCols.add("Calculated Hours");
            tableContentCols.add("Description");

            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select OVERTIME_DATE,OVERTIME_TYPE,OVERTIME_HOURS,CALCULATED_HOURS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("OVERTIME_DATE", "DATE");
            tableColumnDatatypes.put("OVERTIME_TYPE", "STRING");
            tableColumnDatatypes.put("OVERTIME_HOURS", "STRING");
            tableColumnDatatypes.put("CALCULATED_HOURS", "STRING");
            tableColumnDatatypes.put("MISSIONS", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);
        }
        else if(reqPage.equalsIgnoreCase("salary")){
            tableContentCols.add("Salary Period");
            tableContentCols.add("Comments");

            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select SALARY_PERIOD,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("SALARY_PERIOD", "DATE");
            tableColumnDatatypes.put("COMMENTS", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);
            
        }
        else if(reqPage.equalsIgnoreCase("BusinessTrip")){
            tableContentCols.add("Trip Type");
            tableContentCols.add("Airline Ticket Type");
            tableContentCols.add("Start Date");
            tableContentCols.add("End Date");
            tableContentCols.add("Destination Category");
            tableContentCols.add("Number Of Days");
            tableContentCols.add("Exit Reentry Visa");
            tableContentCols.add("Destination Country");
            tableContentCols.add("Advance PerDiem");
            tableContentCols.add("Destination Visa Required");
            tableContentCols.add("Project Type");
            tableContentCols.add("Comments");
            
            
            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,DEST_COUNTRY_CITY,ADV_PERDIEM,DEST_VISA_REQUIRED,PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
            tableColumnDatatypes.put("START_DATE", "DATE");
            tableColumnDatatypes.put("END_DATE", "DATE");
            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
            tableColumnDatatypes.put("DEST_COUNTRY_CITY", "STRING");
            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
            tableColumnDatatypes.put("COMMENTS", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);
        }
        else if(reqPage.equalsIgnoreCase("BusinessTripCompletion")){
            
            tableContentCols.add("Business Travel Request Number");
            tableContentCols.add("Trip Type");
            tableContentCols.add("Airline Ticket Type");
            tableContentCols.add("Start Date");
            tableContentCols.add("End Date");
            tableContentCols.add("Original Start Date");
            tableContentCols.add("Original End Date");
            tableContentCols.add("Destination Category");
            tableContentCols.add("Number Of Days");
            tableContentCols.add("Exit Reentry Visa");
            tableContentCols.add("Destination Country");
            tableContentCols.add("Advance PerDiem");
            tableContentCols.add("Destination Visa Required");
            tableContentCols.add("Project Type");
            tableContentCols.add("Comments");
            
            
            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select BUSS_TRAV_REQ_NUM,TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,ORIG_START_DATE,ORIG_END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,DEST_COUNTRY_CITY,ADV_PERDIEM,DEST_VISA_REQUIRED,PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("BUSS_TRAV_REQ_NUM", "STRING");
            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
            tableColumnDatatypes.put("START_DATE", "DATE");
            tableColumnDatatypes.put("END_DATE", "DATE");
            tableColumnDatatypes.put("ORIG_START_DATE", "DATE");
            tableColumnDatatypes.put("ORIG_END_DATE", "DATE");
            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
            tableColumnDatatypes.put("DEST_COUNTRY_CITY", "STRING");
            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
            tableColumnDatatypes.put("COMMENTS", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);
        }
        else if(reqPage.equalsIgnoreCase("edu")){
            tableContentCols.add("Invoice Number");
            tableContentCols.add("Invoice Date");
            tableContentCols.add("Child Name");
            tableContentCols.add("School Grade");
            tableContentCols.add("Actual Amount");
            tableContentCols.add("School");
            tableContentCols.add("Age");
            tableContentCols.add("Semester");
            tableContentCols.add("Max Eligible Amount");
            tableContentCols.add("Available Amount");
            
            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select INV_NUM,INV_DATE,CHILD,SCHOOLGRADE,ACT_AMT,SCHOOL,AGE,SEMESTER,MAX_AMT,AVL_AMT from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("INV_NUM", "STRING");
            tableColumnDatatypes.put("INV_DATE", "DATE");
            tableColumnDatatypes.put("CHILD", "STRING");
            tableColumnDatatypes.put("SCHOOLGRADE", "STRING");
            tableColumnDatatypes.put("ACT_AMT", "STRING");
            tableColumnDatatypes.put("SCHOOL", "STRING");
            tableColumnDatatypes.put("AGE", "STRING");
            tableColumnDatatypes.put("SEMESTER", "STRING");
            tableColumnDatatypes.put("MAX_AMT", "STRING");
            tableColumnDatatypes.put("AVL_AMT", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);
        }
        else if(reqPage.equalsIgnoreCase("letter")){
            tableContentCols.add("Letter Type");
            tableContentCols.add("Letter To");
            tableContentCols.add("Others");
            
            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select LETTER_TYPE,LETTER_TO,OTHER from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("LETTER_TYPE", "STRING");
            tableColumnDatatypes.put("LETTER_TO", "STRING");
            tableColumnDatatypes.put("OTHER", "STRING");
            emailReq.setTableColumnDatatypes(tableColumnDatatypes);
        }
        else if(reqPage.equalsIgnoreCase("vacation")){
            tableContentCols.add("Leave");
            tableContentCols.add("Comments");
            
            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select LEAVE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("LEAVE", "STRING");
            tableColumnDatatypes.put("COMMENTS", "STRING");
        }
        else if(reqPage.equalsIgnoreCase("house")){
            tableContentCols.add("Advance Amount");
            tableContentCols.add("Comments");
            
            emailReq.setTableContentColumns(tableContentCols);


            emailReq.setDetailsQuery("select ADV_AMT,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("ADV_AMT", "STRING");
            tableColumnDatatypes.put("COMMENTS", "STRING");
        }
        LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
        actionButtons.put("More Info", "");
        emailReq.setActionButtons(actionButtons);
        
        Map<String, String> emailHapmap =
            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

        //Code for Sending email
        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
        
        
        //To mamager
        String[] managerUsers = { "paas.user@salic.com" }; //TODO get manager email 
        String mgrUserName = approverName;
        emailReq.setToEmpName(mgrUserName);
        emailReq.setToEmail(managerUsers);
        emailReq.setSubject("Action required for "+ reqType +" request ("+emailReq.getRequestNo()+") of "+emailReq.getEmpName());
        emailReq.setMessage("<b> "+ reqType +
                            " request </b> for <b>"+emailReq.getEmpName()+ "("+emailReq.getEmpId()+") </b> is pending for your approval with hereunder details:");
        actionButtons = new LinkedHashMap<String, String>();
        actionButtons.put("Approve", "");
        actionButtons.put("Reject", "");
        actionButtons.put("More Info", "");
        emailReq.setActionButtons(actionButtons);
        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

        //Code for Sending email for Manager approval
        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject"), emailHapmap.get("body"));
        
    }
    
    private String getStringBasedOnReqType(String reqType){
        String reqty = null;
        if(reqType.equalsIgnoreCase("ot"))
            return "Over Time";       
        if(reqType.equalsIgnoreCase("salary"))
            return "Salary In Advance";
        if(reqType.equalsIgnoreCase("BusinessTrip"))
            return "Business Trip";
        if(reqType.equalsIgnoreCase("BusinessTripCompletion"))
            return "Business Trip Completion";
        if(reqType.equalsIgnoreCase("edu"))
            return "Education Allowance";
        if(reqType.equalsIgnoreCase("letter"))
            return "HR Letter";
        if(reqType.equalsIgnoreCase("vacation"))
            return "Vacation Allowance";
        if(reqType.equalsIgnoreCase("house"))
            return "Housing Adavce";
        
        //house
        
        return reqty;
    }
    
    public void filterReqActionHistory(String reqType, BigDecimal reqId){
        ViewObjectImpl actionHistVO = getXxQpActionHistoryTVO1();
        actionHistVO.setNamedWhereClauseParam("p_req_typ", getDecodedReqType(reqType));
        actionHistVO.applyViewCriteria(actionHistVO.getViewCriteria("XxQpActionHistoryTVOCriteria1"));
        actionHistVO.setNamedWhereClauseParam("p_req_id", reqId);
        actionHistVO.executeQuery();
        filterPurposeOfTravel(reqType);
    }

    /**
     * Container's getter for employeeROVO2.
     * @return employeeROVO2
     */
    public ViewObjectImpl getemployeeROVOById() {
        return (ViewObjectImpl) findViewObject("employeeROVOById");
    }

    /**
     * Container's getter for OvertimeHoursForEmpROVO1.
     * @return OvertimeHoursForEmpROVO1
     */
    public OvertimeHoursForEmpROVOImpl getOvertimeHoursForEmpROVO1() {
        return (OvertimeHoursForEmpROVOImpl) findViewObject("OvertimeHoursForEmpROVO1");
    }
    
    private void filterPurposeOfTravel(String reqType){
        if(reqType != null && "BusinessTripCompletion".equalsIgnoreCase(reqType)){
            ViewObjectImpl detailVO = getXxhcmOvertimeDetailsAllVO2();
            if(detailVO.first()!= null && detailVO.first().getAttribute("ReqDtlsId") != null){
                ViewObjectImpl purposeVO = getXxhcmPurposeOfTrvl_VO1();
                purposeVO.applyViewCriteria(purposeVO.getViewCriteria("filterByReqId"));
                purposeVO.setNamedWhereClauseParam("bindReqId", detailVO.first().getAttribute("ReqDtlsId"));
                purposeVO.executeQuery();
            }
        }
    }

    /**
     * Container's getter for ValidateOverTimeReqVO1.
     * @return ValidateOverTimeReqVO1
     */
    public ValidateOverTimeReqVOImpl getValidateOverTimeReqVO1() {
        return (ValidateOverTimeReqVOImpl) findViewObject("ValidateOverTimeReqVO1");
    }

    /**
     * Container's getter for ValidateOTonLeaveROVO1.
     * @return ValidateOTonLeaveROVO1
     */
    public ValidateOTonLeaveROVOImpl getValidateOTonLeaveROVO1() {
        return (ValidateOTonLeaveROVOImpl) findViewObject("ValidateOTonLeaveROVO1");
    }

    /**
     * Container's getter for getUserARStatusROVO1.
     * @return getUserARStatusROVO1
     */
    public getUserARStatusROVOImpl getgetUserARStatusROVO1() {
        return (getUserARStatusROVOImpl) findViewObject("getUserARStatusROVO1");
    }
}

