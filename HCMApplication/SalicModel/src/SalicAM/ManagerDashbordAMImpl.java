package SalicAM;

import SalicAM.common.ManagerDashbordAM;

import SalicROVO.FetchAdvPerdiemVOImpl;
import SalicROVO.FetchEmailActionLinkVOImpl;
import SalicROVO.GetJobLevelROVOImpl;
import SalicROVO.GetManagerDetailsROVOImpl;
import SalicROVO.getApprovalGrpDetailsROVOImpl;
import SalicROVO.getApprovalGrpDetailsROVORowImpl;
import SalicROVO.getApprovalSetupDetailsROVOImpl;
import SalicROVO.getApprovalSetupDetailsROVORowImpl;

import SalicView.FetchDestVisaReqdVOImpl;

import SalicView.ManagerDashBoardCountVOImpl;

import SalicView.ManagerDashBoardCountVORowImpl;

import com.oracle.xmlns.oxp.service.v2.ScheduleServiceClient;

import common.AESEncryption;
import common.GenerateEmailTemplate;

import common.pojo.EmailRequestPojo;
import common.pojo.EmailTableDetailsPojo;

import java.math.BigDecimal;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Statement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 09 14:00:00 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ManagerDashbordAMImpl extends ApplicationModuleImpl implements ManagerDashbordAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ManagerDashbordAMImpl() {
    }
    
    private static Boolean ORIGINAL_EMAILS = Boolean.FALSE;

    /**
     * Container's getter for XxhcmApprovalDtlsVO1.
     * @return XxhcmApprovalDtlsVO1
     */
    public ViewObjectImpl getXxhcmApprovalDtlsVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmApprovalDtlsVO1");
    }

    /**
     * Container's getter for XxhcmManagerReqDtlsVO1.
     * @return XxhcmManagerReqDtlsVO1
     */
    public ViewObjectImpl getXxhcmManagerReqDtlsVO1() {
        return (ViewObjectImpl)findViewObject("XxhcmManagerReqDtlsVO1");
    }

    /**
     * Container's getter for XxQpActionHistoryTVO1.
     * @return XxQpActionHistoryTVO1
     */
    public ViewObjectImpl getXxQpActionHistoryTVO1() {
        return (ViewObjectImpl)findViewObject("XxQpActionHistoryTVO1");
    }
    public void load(){
//        ADFContext aDFContext = ADFContext.getCurrent();
//        aDFContext.getPageFlowScope().put("mempId",empId);
        long totalRequest = 0;
        long approvedRequest = 0;
        long rejectedRequest = 0;
        long pendingRequest = 0;
        ManagerDashBoardCountVORowImpl rowCountData = (ManagerDashBoardCountVORowImpl)getManagerDashBoardCountVO1().createRow();
        getManagerDashBoardCountVO1().insertRow(rowCountData);
        getManagerDashBoardCountVO1().setMaxFetchSize(0);
        ADFContext aDFContext = ADFContext.getCurrent();
        BigDecimal empId = (BigDecimal)aDFContext.getPageFlowScope().get("mempId");
        ViewObjectImpl mgrVo1=this.getmanagerDashbaordROVO1();
        mgrVo1.setNamedWhereClauseParam("p_emp_logged_in", empId);
        mgrVo1.executeQuery();
        //Defaulting to pending
        ViewCriteria employeeVC =
            mgrVo1.getViewCriteria("filterByStatus");
        mgrVo1.applyViewCriteria(employeeVC);
        mgrVo1.setNamedWhereClauseParam("p_Status", "P");
        mgrVo1.executeQuery();
        
        ViewObject mgrVo=this.getmanagerDashbaordROVO2();
        mgrVo.setNamedWhereClauseParam("p_emp_logged_in", empId);
        System.err.println("total request "+mgrVo.getEstimatedRowCount());
        totalRequest = mgrVo.getEstimatedRowCount();
        rowCountData.setTotalCount(mgrVo.getEstimatedRowCount());
        aDFContext.getPageFlowScope().put("total", mgrVo.getEstimatedRowCount());
        
        ViewCriteria vc=mgrVo.createViewCriteria();
        ViewCriteriaRow vcr=vc.createViewCriteriaRow();
        vcr.setAttribute("ApproverFlag", "A");
        vc.addRow(vcr);
        mgrVo.applyViewCriteria(vc);
        mgrVo.executeQuery();
        System.err.println("Approved request "+mgrVo.getEstimatedRowCount());
        rowCountData.setApprovedCount(mgrVo.getEstimatedRowCount());
        aDFContext.getPageFlowScope().put("approved", mgrVo.getEstimatedRowCount());
        approvedRequest = mgrVo.getEstimatedRowCount();
        
        ViewCriteria vcc=mgrVo.createViewCriteria();
        ViewCriteriaRow vccr=vcc.createViewCriteriaRow();
        vccr.setAttribute("ApproverFlag", "R");
        vcc.addRow(vccr);
        mgrVo.applyViewCriteria(vcc);
        mgrVo.executeQuery();
        System.err.println("Rejected request "+mgrVo.getEstimatedRowCount());
        rowCountData.setRejectedCount(mgrVo.getEstimatedRowCount());
        aDFContext.getPageFlowScope().put("rejected", mgrVo.getEstimatedRowCount());
        rejectedRequest = mgrVo.getEstimatedRowCount();;
    
        pendingRequest = totalRequest - approvedRequest - rejectedRequest;
        System.err.println("Pending request "+pendingRequest);
        aDFContext.getPageFlowScope().put("pending", pendingRequest);
        rowCountData.setPendingCount(pendingRequest);
        
        ViewCriteria vcccc=mgrVo.createViewCriteria();
        ViewCriteriaRow vccccr=vcccc.createViewCriteriaRow();
        vccccr.setAttribute("RequestNumber", "");
        vcccc.addRow(vccccr);
        mgrVo.applyViewCriteria(null);
        mgrVo.executeQuery();
        //        mgrVo.getEstimatedRowCount();
//        AdfFacesContext.getCurrentInstance().addPartialTarget(totaReq);
    }

    /**
     * Container's getter for XxQpActionHistoryTVO2.
     * @return XxQpActionHistoryTVO2
     */
    public ViewObjectImpl getXxQpActionHistoryTVO2() {
        return (ViewObjectImpl)findViewObject("XxQpActionHistoryTVO2");
    }

    /**
     * Container's getter for managerDashbaordROVO1.
     * @return managerDashbaordROVO1
     */
    public ViewObjectImpl getmanagerDashbaordROVO1() {
        return (ViewObjectImpl)findViewObject("managerDashbaordROVO1");
    }

    /**
     * Container's getter for managerDashbaordROVO2.
     * @return managerDashbaordROVO2
     */
    public ViewObjectImpl getmanagerDashbaordROVO2() {
        return (ViewObjectImpl)findViewObject("managerDashbaordROVO2");
    }

    /**
     * Container's getter for managerDashbaordROVO3.
     * @return managerDashbaordROVO3
     */
    public ViewObjectImpl getmanagerDashbaordROVO3() {
        return (ViewObjectImpl)findViewObject("managerDashbaordROVO3");
    }


    /**
     * Container's getter for XxQpActionHistoryTVO4.
     * @return XxQpActionHistoryTVO4
     */
    public ViewObjectImpl getXxQpActionHistoryTVO4() {
        return (ViewObjectImpl)findViewObject("XxQpActionHistoryTVO4");
    }

    /**
     * Container's getter for manager_QpActionHistory_VL2.
     * @return manager_QpActionHistory_VL2
     */
    public ViewLinkImpl getmanager_QpActionHistory_VL2() {
        return (ViewLinkImpl)findViewLink("manager_QpActionHistory_VL2");
    }
    
    public void prepareMailTemplateAndSend(String approveOrReject) {
        EmailRequestPojo emailReq = new EmailRequestPojo();
        
        ViewObjectImpl emailVO = getFetchEmailActionLinkVO1();
        emailVO.executeQuery();
        String emailUrl = "";
        if(emailVO.first() != null){
            emailUrl = (String) emailVO.first().getAttribute("LookupValueNameDisp");
        }
        
        ViewObjectImpl otHdrVO = getmanagerDashbaordROVO1();
        
        String reqType =  getStringBasedOnReqType((String) otHdrVO.getCurrentRow().getAttribute("ReqType"));
        
        emailReq.setRequestId(((BigDecimal) otHdrVO.getCurrentRow().getAttribute("ReqId")).intValue());
        emailReq.setRequestNo((String) otHdrVO.getCurrentRow().getAttribute("RequestNumber"));
        emailReq.setEmpId(((BigDecimal) otHdrVO.getCurrentRow().getAttribute("EmpId")).toString());
        emailReq.setEmpName((String) otHdrVO.getCurrentRow().getAttribute("EmployeeName"));
        emailReq.setEmpNumber((String) otHdrVO.getCurrentRow().getAttribute("EmployeeNumber"));
        String empNameR = (String) otHdrVO.getCurrentRow().getAttribute("EmployeeName");
        ArrayList<String> toRecepients = new ArrayList<String>();
        
        String reqStatus = (String) otHdrVO.getCurrentRow().getAttribute("ReqStatus");
        String empEmail =  (String) otHdrVO.getCurrentRow().getAttribute("EmpEmail");
        
        getXxQpActionHistoryTVO1().applyViewCriteria(getXxQpActionHistoryTVO1().getViewCriteria("XxQpActionHistoryTVOCriteria1"));
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", getDecodedReqType((String) otHdrVO.getCurrentRow().getAttribute("ReqType")));
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id", ((BigDecimal) otHdrVO.getCurrentRow().getAttribute("ReqId")));
        getXxQpActionHistoryTVO1().executeQuery();
        
        BigDecimal empId = (BigDecimal) ADFContext.getCurrent().getPageFlowScope().get("mempId");
        if(empId == null){
            empId = (BigDecimal) otHdrVO.getNamedWhereClauseParam("p_emp_logged_in");
        }
        
        BigDecimal approveLevel = null;
        String firstLevelApproverName = "";
        String secondLevelApproverName = "";
        String apprEmail = null;
        String rejectReason = "";
        
        String reqPage = (String) otHdrVO.getCurrentRow().getAttribute("ReqType");
        
        if (reqPage.equalsIgnoreCase("ot")) {
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Overtime Date");
            tableContentCols.add("Overtime Type");
            tableContentCols.add("Overtime Hours");
            tableContentCols.add("Calculated Hours");
            tableContentCols.add("Description");

            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select OVERTIME_DATE,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'OT_TYPE' and dtl.lookup_value_name=OVERTIME_TYPE) OVERTIME_TYPE,OVERTIME_HOURS,CALCULATED_HOURS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("OVERTIME_DATE", "DATE");
            tableColumnDatatypes.put("OVERTIME_TYPE", "STRING");
            tableColumnDatatypes.put("OVERTIME_HOURS", "STRING");
            tableColumnDatatypes.put("CALCULATED_HOURS", "STRING");
            tableColumnDatatypes.put("MISSIONS", "STRING");
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            emailReq.setTableDetails(emailTableDetails);

        }
        else if(reqPage.equalsIgnoreCase("salary")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Salary Period");
            tableContentCols.add("Advance Date");
            tableContentCols.add("Comments");

            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select SAL_PERIOD,SALARY_DATE,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("SAL_PERIOD", "STRING");
            tableColumnDatatypes.put("SALARY_DATE", "DATE");
            tableColumnDatatypes.put("MISSIONS", "STRING");
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            emailReq.setTableDetails(emailTableDetails);
            
        }
        else if(reqPage.equalsIgnoreCase("BusinessTrip")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Trip Type");
            tableContentCols.add("Airline Ticket Type");
            tableContentCols.add("Start Date");
            tableContentCols.add("End Date");
            tableContentCols.add("Destination Category");
            tableContentCols.add("Number Of Days");
            tableContentCols.add("Exit Reentry Visa");
            tableContentCols.add("Destination Country");
            tableContentCols.add("Advance PerDiem");
            tableContentCols.add("Destination Visa Required");
            tableContentCols.add("Project Type");
            tableContentCols.add("Comments");
            
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,(select country_name from country where country_id = DESTINATION_COUNTRY) DESTINATION_COUNTRY,ADV_PERDIEM,DEST_VISA_REQUIRED,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'PROJ_TYPE' and dtl.lookup_value_name=PROJ_TYPE) PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
            tableColumnDatatypes.put("START_DATE", "DATE");
            tableColumnDatatypes.put("END_DATE", "DATE");
            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
            tableColumnDatatypes.put("DESTINATION_COUNTRY", "STRING");
            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
            tableColumnDatatypes.put("COMMENTS", "STRING");
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            tableDetail = new EmailTableDetailsPojo(); 
            
            tableContentCols = new ArrayList<String>();
            tableContentCols.add("Start Date");
            tableContentCols.add("End Date");
            tableContentCols.add("Activity");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery(" select start_date, end_date, activity from XXHCM_PURPOSE_OF_TRVL where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                     emailReq.getRequestId()+")");
            tableDetail.setTableLabel("Trip Activity");
            
            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("START_DATE", "DATE");
            tableColumnDatatypes.put("END_DATE", "DATE");
            tableColumnDatatypes.put("ACTIVITY", "STRING");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            emailReq.setTableDetails(emailTableDetails);
            
            
        }
        else if(reqPage.equalsIgnoreCase("BusinessTripCompletion")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Business Travel Request Number");
            tableContentCols.add("Trip Type");
            tableContentCols.add("Airline Ticket Type");
            tableContentCols.add("Start Date");
            tableContentCols.add("End Date");
            tableContentCols.add("Destination Category");
            tableContentCols.add("Number Of Days");
            tableContentCols.add("Exit Reentry Visa");
            tableContentCols.add("Destination Country");
            tableContentCols.add("Advance PerDiem");
            tableContentCols.add("Destination Visa Required");
            tableContentCols.add("Project Type");
            tableContentCols.add("Comments");
            
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select BUSS_TRAV_REQ_NUM_VALUE,TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,(select country_name from country where country_id = DESTINATION_COUNTRY) DESTINATION_COUNTRY,ADV_PERDIEM,DEST_VISA_REQUIRED,PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("BUSS_TRAV_REQ_NUM_VALUE", "STRING");
            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
            tableColumnDatatypes.put("START_DATE", "DATE");
            tableColumnDatatypes.put("END_DATE", "DATE");
            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
            tableColumnDatatypes.put("DESTINATION_COUNTRY", "STRING");
            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
            tableColumnDatatypes.put("COMMENTS", "STRING");
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            tableDetail = new EmailTableDetailsPojo(); 
            
            tableContentCols = new ArrayList<String>();
            tableContentCols.add("Start Date");
            tableContentCols.add("End Date");
            tableContentCols.add("Activity");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery(" select start_date, end_date, activity from XXHCM_PURPOSE_OF_TRVL where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                     emailReq.getRequestId()+")");
            
            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("START_DATE", "DATE");
            tableColumnDatatypes.put("END_DATE", "DATE");
            tableColumnDatatypes.put("ACTIVITY", "STRING");
            tableDetail.setTableLabel("Trip Activity");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            tableDetail = new EmailTableDetailsPojo(); 
            
            tableContentCols = new ArrayList<String>();
            tableContentCols.add("Number Of Days");
            tableContentCols.add("Perdiem Per day");
            tableContentCols.add("Total Perdiem");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select number_of_days, perdiem_per_Day, total_perdiem from xxhcm_overtime_details_all where req_id = " +emailReq.getRequestId());
            
            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
            tableColumnDatatypes.put("PERDIEM_PER_DAY", "STRING");
            tableColumnDatatypes.put("TOTAL_PERDIEM", "STRING");
            tableDetail.setTableLabel("Business Trip Reimbursement Info");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            tableDetail = new EmailTableDetailsPojo(); 
            
            tableContentCols = new ArrayList<String>();
            tableContentCols.add("Expense Description");
            tableContentCols.add("Currency");
            tableContentCols.add("Exchange Rate");
            tableContentCols.add("Expense Amount");
            tableContentCols.add("Amount in SAR");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery(" select expn_desc, currency, exchn_rate, other_expn, total_amount  from XXHCM_OTHER_EXPENSE where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                     emailReq.getRequestId()+")");
            
            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("EXPN_DESC", "STRING");
            tableColumnDatatypes.put("CURRENCY", "STRING");
            tableColumnDatatypes.put("EXCHN_RATE", "STRING");
            tableColumnDatatypes.put("OTHER_EXPN", "STRING");
            tableColumnDatatypes.put("TOTAL_AMOUNT", "STRING");
            tableDetail.setTableLabel("Other Expenses");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            tableDetail = new EmailTableDetailsPojo(); 
            
            tableContentCols = new ArrayList<String>();
            tableContentCols.add("Grand Total");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select (total_perdiem + nvl((select sum(total_amount) from XXHCM_OTHER_EXPENSE where REQ_DTLS_ID =" +
                "(select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = "+emailReq.getRequestId()+")),0)) Grand_Total " +
                       "from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +emailReq.getRequestId());
            
            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("GRAND_TOTAL", "STRING");
            tableDetail.setTableLabel("Grand Total");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            
            emailReq.setTableDetails(emailTableDetails);
        }
        else if(reqPage.equalsIgnoreCase("edu")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Invoice Number");
            tableContentCols.add("Invoice Date");
            tableContentCols.add("Invoice Amount");
            tableContentCols.add("Child Name");
            tableContentCols.add("School Grade");
            tableContentCols.add("Actual Amount");
            tableContentCols.add("School");
            tableContentCols.add("Age");
            tableContentCols.add("Semester");
            tableContentCols.add("Max Eligible Amount");
            tableContentCols.add("Available Amount");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select INV_NUM,INV_DATE,INV_TOTAL,(select display_name from XXSTG_PERSON where person_id = contactpersonid) CHILD,GRADE,ACT_AMT,SCHOOL,AGE,SEMESTER,MAX_AMT,AVL_AMT from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("INV_NUM", "STRING");
            tableColumnDatatypes.put("INV_DATE", "DATE");
            tableColumnDatatypes.put("INV_TOTAL", "STRING");
            tableColumnDatatypes.put("CHILD", "STRING");
            tableColumnDatatypes.put("GRADE", "STRING");
            tableColumnDatatypes.put("ACT_AMT", "STRING");
            tableColumnDatatypes.put("SCHOOL", "STRING");
            tableColumnDatatypes.put("AGE", "STRING");
            tableColumnDatatypes.put("SEMESTER", "STRING");
            tableColumnDatatypes.put("MAX_AMT", "STRING");
            tableColumnDatatypes.put("AVL_AMT", "STRING");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            emailReq.setTableDetails(emailTableDetails);
            
        }
        else if(reqPage.equalsIgnoreCase("letter")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Letter Type");
            tableContentCols.add("Letter To");
            tableContentCols.add("Others");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select (select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'LETTER_TYPE' and dtl.lookup_value_name=LETTER_TYPE) LETTER_TYPE,LETTER_TO,OTHER from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("LETTER_TYPE", "STRING");
            tableColumnDatatypes.put("LETTER_TO", "STRING");
            tableColumnDatatypes.put("OTHER", "STRING");
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            emailReq.setTableDetails(emailTableDetails);
        }
        else if(reqPage.equalsIgnoreCase("vacation")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Leave");
            tableContentCols.add("Number of Days");
            tableContentCols.add("Comments");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select LEAVE,NO_OF_DAYS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("LEAVE", "STRING");
            tableColumnDatatypes.put("NO_OF_DAYS", "STRING");
            tableColumnDatatypes.put("MISSIONS", "STRING");
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            emailReq.setTableDetails(emailTableDetails);
        }
        else if(reqPage.equalsIgnoreCase("house")){
            
            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
            ArrayList<String> tableContentCols = new ArrayList<String>();
            LinkedHashMap<String, String> tableColumnDatatypes = null;
            
            tableContentCols.add("Advance Amount");
            tableContentCols.add("Salary Date");
            tableContentCols.add("Comments");
            tableContentCols.add("No. of Months");
            
            tableDetail.setTableContentColumns(tableContentCols);


            tableDetail.setDetailsQuery("select ADV_AMT,SALARY_DATE,COMMENTS,MONTHS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                     emailReq.getRequestId());

            tableColumnDatatypes = new LinkedHashMap<String, String>();
            tableColumnDatatypes.put("ADV_AMT", "STRING");
            tableColumnDatatypes.put("SALARY_DATE", "DATE");
            tableColumnDatatypes.put("COMMENTS", "STRING");
            tableColumnDatatypes.put("MONTHS", "STRING");
            
            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
            
            emailTableDetails.add(tableDetail);
            emailReq.setTableDetails(emailTableDetails);
        }
        if(approveOrReject != null && "A".equalsIgnoreCase(approveOrReject)){
       
        getXxQpActionHistoryTVO1().applyViewCriteria(getXxQpActionHistoryTVO1().getViewCriteria("XxQpActionHistoryTVOCriteria1"));
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", getDecodedReqType((String) otHdrVO.getCurrentRow().getAttribute("ReqType")));
        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id", ((BigDecimal) otHdrVO.getCurrentRow().getAttribute("ReqId")));
        getXxQpActionHistoryTVO1().executeQuery();
//            
//            RowQualifier rowQualifier = new RowQualifier(vo);  
//                 rowQualifier.setWhereClause("AttributeName=AttributeValue");  
//                 filteredRows = vo.getFilteredRows(rowQualifier);    
        ViewObject vo =  getXxQpActionHistoryTVO1();
        vo.executeQuery();
        Row[] rows = vo.getFilteredRows("ApprBy", empId);
        if(rows != null && rows.length > 0){
            approveLevel = (BigDecimal)rows[0].getAttribute("ApproveLevel");
            firstLevelApproverName = (String) rows[0].getAttribute("ApproverUserName");
            rejectReason = (String)rows[0].getAttribute("ApproverComments");
            BigDecimal nextLevel = approveLevel.add(new BigDecimal(1));
            rows = vo.getFilteredRows("ApproveLevel", nextLevel);
            if(rows != null && rows.length > 0){
                //next level approver is present.
                secondLevelApproverName = (String) rows[0].getAttribute("ApproverUserName");
                String approverId = (String) rows[0].getAttribute("ApproverId");
                apprEmail = (String) rows[0].getAttribute("ApproverEmail");
                //sending email to employee about first level approval complete and nexi is pending
                //for employee
                 if(ORIGINAL_EMAILS){
                     if(empEmail == null){
                         empEmail = "paas.user@salic.com";
                     }
                     String[] to = {empEmail};
                     emailReq.setToEmail(to);
                 }
                 else{
                     String[] to = { "paas.user@salic.com" }; 
                     emailReq.setToEmail(to);
                 } 
                
                
                emailReq.setToEmpName(emailReq.getEmpName());
                //                    emailReq.setToEmail((String[]) toRecepients.toArray());

                //if(reqStatus != null && !"DELETED".equalsIgnoreCase(reqStatus)){   
                    emailReq.setSubject("FYI : "+reqType+" request("+emailReq.getRequestNo()+") is approved from "+firstLevelApproverName+",  pending with "+secondLevelApproverName);
                    emailReq.setMessage("Your <b> "+reqType+" request </b>is pending for approval from <b>"+secondLevelApproverName+" </b> with hereunder information:");
//                }
//                else if(reqStatus != null && "DELETED".equalsIgnoreCase(reqStatus)){
//                    emailReq.setSubject(reqType+" request("+emailReq.getRequestNo()+") Cancellation is approved from "+firstLevelApproverName+" and assigned to "+secondLevelApproverName);
//                    emailReq.setMessage("<b>"+reqType+" request </b>Cancellation is approved from <b>"+firstLevelApproverName+"<b> and assigned to <b>"+secondLevelApproverName+" </b> with hereunder information:");
//                }
               
                
                LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                actionButtons.put("More Info", "");
                emailReq.setActionButtons(actionButtons);
                
                Map<String, Object> emailHapmap =
                    GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                //Code for Sending email to employee about first level approval complete and nexi is pending
                GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"",(ArrayList) emailHapmap.get("bodyParts"));
                
                //To second approver
                if(ORIGINAL_EMAILS){
                    if(apprEmail == null){
                        apprEmail = "paas.user@salic.com";
                    }
                    String[] to = {apprEmail};
                    emailReq.setToEmail(to);
                }
                else{
                    String[] to = { "paas.user@salic.com" }; 
                    emailReq.setToEmail(to);
                } 
              
               String mgrUserName = secondLevelApproverName;
               emailReq.setToEmpName(mgrUserName);
                //if(reqStatus != null && !"DELETED".equalsIgnoreCase(reqStatus)){   
                emailReq.setSubject("Action required for "+ reqType +" request ("+emailReq.getRequestNo()+") of "+emailReq.getEmpName()+"("+emailReq.getEmpNumber()+")");
                emailReq.setMessage("<b> "+ reqType +
                                   " request </b> for <b>"+emailReq.getEmpName()+ "("+emailReq.getEmpNumber()+") </b> is pending for your approval with hereunder details:");
//                }
//                else if(reqStatus != null && "DELETED".equalsIgnoreCase(reqStatus)){
//                    emailReq.setSubject("Action required for "+ reqType +" request ("+emailReq.getRequestNo()+") Cancellation of "+emailReq.getEmpName()+"("+emailReq.getEmpNumber()+")");
//                    emailReq.setMessage("<b> "+ reqType +
//                                        " request </b> Cancellation for <b>"+emailReq.getEmpName()+ "("+emailReq.getEmpNumber()+") </b> is pending for your approval with hereunder details:");
//                }
               actionButtons = new LinkedHashMap<String, String>();
               actionButtons.put("Approve", emailUrl+"?reqId="+AESEncryption.encryptText(emailReq.getRequestId().toString())+"&approverId="+AESEncryption.encryptText(approverId)+"&appOrRej=A");
               actionButtons.put("Reject", emailUrl+"?reqId="+AESEncryption.encryptText(emailReq.getRequestId().toString())+"&approverId="+AESEncryption.encryptText(approverId)+"&appOrRej=R");
               actionButtons.put("More Info", "");
               emailReq.setActionButtons(actionButtons);
               emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

               //Code for Sending email for second approver
               GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));
                
            }
            else{
                //for employee on finalapproval
                if(ORIGINAL_EMAILS){
                    if(empEmail == null){
                        empEmail = "paas.user@salic.com";
                    }
                    String[] to = {empEmail};
                    emailReq.setToEmail(to);
                }
                else{
                    String[] to = { "paas.user@salic.com" }; 
                    emailReq.setToEmail(to);
                } 
                emailReq.setToEmpName(emailReq.getEmpName());
                    //if(reqStatus != null && !"DELETED".equalsIgnoreCase(reqStatus)){   
                    emailReq.setSubject("FYI : "+reqType+" request("+emailReq.getRequestNo()+") is approved.");
                    emailReq.setMessage("Your <b> "+reqType+" request </b> is approved with hereunder information:");
//                    }
//                    else if(reqStatus != null && "DELETED".equalsIgnoreCase(reqStatus)){
//                        emailReq.setSubject(reqType+" request("+emailReq.getRequestNo()+") is cancelled.");
//                        emailReq.setMessage("Your <b> "+reqType+" request </b> is cancelled with hereunder information:");
//                    }
                LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                actionButtons = new LinkedHashMap<String, String>();
                actionButtons.put("More Info", "");
                emailReq.setActionButtons(actionButtons);
                Map<String, Object> emailHapmap =
                    GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                    
                    if(reqPage.equalsIgnoreCase("letter")){
                        String letter_to = null;
                        String letter_to_ar = null;
                        String letter_to_ot = null;
                        String letter_to_ot_ar = null;
                            String letterType = null;
                            BigDecimal empPr = null;
                    try {
                                Statement stmt = getDBTransaction().createPreparedStatement("select * from dual", 1)
                                                                   .getConnection()
                                                                   .createStatement();
                                String query =
                            "select (select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'LETTER_TYPE' and dtl.lookup_value_name=LETTER_TYPE) LETTER_TYPE," +
                                    "LETTER_TO,OTHER,OTHER1,c.emp_number, (select arbname FROM XXSTG_HRLETTERDTLS WHERE ENGNAME = LETTER_TO) LETTER_AR " +
                                    " from XXHCM_OVERTIME_DETAILS_ALL a, xxhcm_overtime_headers_all b,xxstg_employee_details c where a.req_id= b.req_id and b.emp_id = c.emp_id and b.REQ_ID=" +
                                    emailReq.getRequestId();
                        
                                ResultSet rs = stmt.executeQuery(query);
                        rs.next();
                                letter_to  = rs.getString("LETTER_TO");    
                            letter_to_ar = rs.getString("LETTER_AR"); 
                        letter_to_ot = rs.getString("OTHER1");
                            letter_to_ot_ar = rs.getString("OTHER");
                        letterType = rs.getString("LETTER_TYPE");
                            empPr = rs.getBigDecimal("emp_number");
                            System.out.println("emp id =>"+empPr+" letter to==>"+letter_to+" letter type==>"+letterType);
                        } catch (SQLException sqle) {
                                // TODO: Add catch code
                                sqle.printStackTrace();
                            }
                    
                            ScheduleServiceClient ssc = new ScheduleServiceClient();
                            if(letter_to.equalsIgnoreCase("OTHERS")){
                            ssc.scheduleReportForHrLetter(empPr.toString(), letter_to_ot,letter_to_ot_ar,letterType);
                            }else{
                                ssc.scheduleReportForHrLetter(empPr.toString(), letter_to,letter_to_ar,letterType);
                            }
                        }
                //Code for Sending email for second approver
                GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));
                //empNameR
                    try {
                        sendFYINotification(emailReq.getRequestNo(), new oracle.jbo.domain.Number(emailReq.getEmpId()),
                                            reqPage, new oracle.jbo.domain.Number(emailReq.getRequestId()), empNameR);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
        }
        }
        else if(approveOrReject != null && "R".equalsIgnoreCase(approveOrReject)){
            getXxQpActionHistoryTVO1().applyViewCriteria(getXxQpActionHistoryTVO1().getViewCriteria("XxQpActionHistoryTVOCriteria1"));
            getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", getDecodedReqType((String) otHdrVO.getCurrentRow().getAttribute("ReqType")));
            getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id", ((BigDecimal) otHdrVO.getCurrentRow().getAttribute("ReqId")));
            getXxQpActionHistoryTVO1().executeQuery();
            Row[] rows = getXxQpActionHistoryTVO1().getFilteredRows("ApproverId", empId.toString());
            if(rows != null && rows.length > 0){
                approveLevel = (BigDecimal)rows[0].getAttribute("ApproveLevel");
                firstLevelApproverName = (String) rows[0].getAttribute("ApproverUserName");
                rejectReason = (String)rows[0].getAttribute("ApproverComments");
            }
            //to employee
            if(ORIGINAL_EMAILS){
                if(empEmail == null){
                    empEmail = "paas.user@salic.com";
                }
                String[] to = {empEmail};
                emailReq.setToEmail(to);
            }
            else{
                String[] to = { "paas.user@salic.com" }; 
                emailReq.setToEmail(to);
            } 
            emailReq.setToEmpName(emailReq.getEmpName());
            emailReq.setSubject("FYI : "+reqType+" request("+emailReq.getRequestNo()+") is rejected");
            emailReq.setMessage("Your <b> "+reqType+" request </b> is rejected by "+firstLevelApproverName+" with hereunder information: <br><br> Reject Reason : "+rejectReason);
            LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
            actionButtons = new LinkedHashMap<String, String>();
            actionButtons.put("More Info", "");
            emailReq.setActionButtons(actionButtons);
            Map<String, Object> emailHapmap =
                GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
            emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

            //Code for Sending email for employee
            GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));
        }
        else if(approveOrReject != null && "M".equalsIgnoreCase(approveOrReject)){
            int actionSet = getMaximumActionSetForRequest(emailReq.getRequestId().toString()) -1;
            Row[] rs =  getXxQpActionHistoryTVO1().getFilteredRows("ActionSet", actionSet);
            
            HashMap<String, String> approvedMgrs = new HashMap<String, String>();
            //RowSetIterator rs =  getXxQpActionHistoryTVO1().createRowSetIterator(null);
            ArrayList<String> toArray = new ArrayList<String>();
            for (Row row : rs){
                if(row.getAttribute("ApproverFlag") != null){
                    String email = (String)row.getAttribute("ApproverEmail");
                    toArray.add(email);
                    approvedMgrs.put(row.getAttribute("ApproverUserName")+"", email);
                }
            }
            approvedMgrs.put(emailReq.getEmpName(), empEmail);
            
            Row[] rows = getXxQpActionHistoryTVO1().getFilteredRows("ApproverId", empId.toString());
            if(rows != null && rows.length > 0){
                firstLevelApproverName = (String) rows[0].getAttribute("ApproverUserName");
            }
            
            rejectReason = (String) otHdrVO.getCurrentRow().getAttribute("ApprComments");
            
            //approvers and employee
            for(Map.Entry<String, String> managerMap : approvedMgrs.entrySet()){
                // String to[] = (String[]) toArray.toArray();
                //to approvers and employees
                if(ORIGINAL_EMAILS){
                    String email = managerMap.getValue();
                    if(email == null){
                        email = "paas.user@salic.com";
                    }
                    String to[] = { email };
                    emailReq.setToEmail(to);
                }
                else{
                    String[] to = { "paas.user@salic.com" }; //TODO get logged in user email
                    emailReq.setToEmail(to);
                }
                
                emailReq.setToEmpName(managerMap.getKey());
                emailReq.setSubject(reqType+" request("+emailReq.getRequestNo()+") is returned to "+empNameR+" for more information from "+firstLevelApproverName);
                emailReq.setMessage("<b> "+reqType+" request </b> is returned for more information from "+firstLevelApproverName+" with hereunder details: <br><br> More Information Reason : "+rejectReason);
                LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                actionButtons = new LinkedHashMap<String, String>();
                actionButtons.put("More Info", "");
                emailReq.setActionButtons(actionButtons);
                Map<String, Object> emailHapmap =
                    GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                //Code for Sending email for second approver
                GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));   
            }
        }
    }
    
    
    public void sendFYINotification(String reqNumber,oracle.jbo.domain.Number empId,String reqType,oracle.jbo.domain.Number req_id,String empRName){
        BigDecimal empIdB = empId.bigDecimalValue();
        int apprSeqNew = 0;
        ViewObject approvSetup = getgetApprovalSetupDetailsROVO1();
        approvSetup.setNamedWhereClauseParam("p_appr_type", "FYI");
        approvSetup.setNamedWhereClauseParam("p_req_type", getDecodedReqType(reqType));
        approvSetup.executeQuery();
        RowSetIterator rsi  = null;
        RowSetIterator rsigrpDet = null;
        Integer jobLevelInt = null;
        String JobLevel = null;
        ViewObject empJobLev = getGetJobLevelROVO1();
        empJobLev.setNamedWhereClauseParam("p_emp_id", empIdB);
        empJobLev.executeQuery();
        if(empJobLev.hasNext()){
            JobLevel =  (String)empJobLev.first().getAttribute("JobLevel");
            jobLevelInt = Integer.parseInt(JobLevel);
        }
        try {
            rsi = approvSetup.createRowSetIterator("apprSetup");
            rsi.reset();
            while (rsi.hasNext()) {
                getApprovalSetupDetailsROVORowImpl apprSetRow = (getApprovalSetupDetailsROVORowImpl)rsi.next();
                BigDecimal ApprLevel = apprSetRow.getApprLevel();
                BigDecimal ApprGroupId= apprSetRow.getApprGroupId();
                BigDecimal CustApprGroupId= apprSetRow.getCustApprGroupId();
                String payrollGroup = apprSetRow.getPayrollGroup();
                String ticketGroup = apprSetRow.getTicketGroup();
                BigDecimal managerId = null;
                String managerName = null;
                String emailAddress = null;
                //Superwiser
                String advPerdiem = null;
                if(ApprGroupId.compareTo(new BigDecimal(100012)) == 0){
                    ViewObject empManager = getGetManagerDetailsROVO1();
                    empManager.setNamedWhereClauseParam("p_emp_id", empIdB);
                    empManager.executeQuery();
                    if(empManager.hasNext()){
                        managerId =  (BigDecimal)empManager.first().getAttribute("ManagerId");
                        //BV_EMP_ID
                        ViewObject empManagerDet = getemployeeROVO1();
                        empManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                        empManagerDet.executeQuery();
                        if(empManagerDet.hasNext()){
                            managerName =(String)empManagerDet.first().getAttribute("EmpName");
                            emailAddress = (String)empManagerDet.first().getAttribute("EmailAddress");   
                        }
                        
                        EmailRequestPojo emailReq = new EmailRequestPojo();
                        emailReq.setRequestNo(reqNumber);
                        
                        if(ORIGINAL_EMAILS){
                            if(emailAddress == null){
                                emailAddress = "paas.user@salic.com";
                            }
                            String[] to = {emailAddress};
                            emailReq.setToEmail(to);
                        }
                        else{
                            String[] to = { "paas.user@salic.com" }; 
                            emailReq.setToEmail(to);
                        }
                        
                        
                        emailReq.setRequestId(new Integer(req_id+""));
                        emailReq.setToEmpName(managerName);
                        if(ticketGroup != null && "Y".equalsIgnoreCase(ticketGroup)){
                            if(reqType != null && "BusinessTrip".equalsIgnoreCase(reqType)){
                                FetchDestVisaReqdVOImpl destVisaVO = getFetchDestVisaReqdVO1();
                                destVisaVO.setbindReqId(new BigDecimal(emailReq.getRequestId()));
                                destVisaVO.executeQuery();
                                if(destVisaVO.first() != null){
                                    String visaReqd = (String) destVisaVO.first().getAttribute("DestVisaRequired");
                                    if(visaReqd != null && "YES".equalsIgnoreCase(visaReqd)){
                                        emailReq.setSubject("Action required for "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") of "+empRName+" which is approved by "+managerName+" is pending with ticket group");
                                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") of "+empRName+" is finally approved by "+managerName+" and pending with ticket group with hereunder details:");          
                                    }
                                    else{
                                        emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") of "+empRName+" has been finally approved by "+managerName);
                                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") of "+empRName+" has been finally approved by "+managerName+" with hereunder details:");   
                                    }
                                }
                            }
                            else{
                                emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") of "+empRName+" has been finally approved by "+managerName);
                                emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") of "+empRName+" has been finally approved by "+managerName+" with hereunder details:");   
                            }
                        }
                        else if(payrollGroup != null && "Y".equalsIgnoreCase(payrollGroup)){
                            if(reqType != null && "BusinessTrip".equalsIgnoreCase(reqType)){
                                FetchAdvPerdiemVOImpl advPerdiemVO = getFetchAdvPerdiemVO1();
                                advPerdiemVO.setbindReqId(new BigDecimal(emailReq.getRequestId()));
                                advPerdiemVO.executeQuery();
                                if(advPerdiemVO.first() != null){
                                    advPerdiem = (String) advPerdiemVO.first().getAttribute("AdvPerdiem");
                                    if(advPerdiem != null && "YES".equalsIgnoreCase(advPerdiem)){
                                        emailReq.setSubject("Action required for "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") of "+empRName+" which is approved by "+managerName+" is pending with payroll group");
                                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") of "+empRName+" is finally approved by "+managerName+" and pending with payroll group with hereunder details:");   
                                    }
                                }
                                
                            }
                            else{
                                emailReq.setSubject("Action required for "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") of "+empRName+" which is approved by "+managerName+" is pending with payroll group");
                                emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") of "+empRName+" is finally approved by "+managerName+" and pending with payroll group with hereunder details:");   
                            }
                        }
                        else{
                            emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" request ("+emailReq.getRequestNo()+") of "+empRName+" has been finally approved by "+managerName);
                            emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") of "+empRName+" has been finally approved by "+managerName+" with hereunder details:");   
                        }
                        LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons.put("More Info", "");
                        emailReq.setActionButtons(actionButtons);
                        Map<String, Object> emailHapmap =
                            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        
                        String reqPage = reqType;
                        
                        if (reqPage.equalsIgnoreCase("ot")) {
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Overtime Date");
                            tableContentCols.add("Overtime Type");
                            tableContentCols.add("Overtime Hours");
                            tableContentCols.add("Calculated Hours");
                            tableContentCols.add("Description");

                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select OVERTIME_DATE,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'OT_TYPE' and dtl.lookup_value_name=OVERTIME_TYPE) OVERTIME_TYPE,OVERTIME_HOURS,CALCULATED_HOURS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("OVERTIME_DATE", "DATE");
                            tableColumnDatatypes.put("OVERTIME_TYPE", "STRING");
                            tableColumnDatatypes.put("OVERTIME_HOURS", "STRING");
                            tableColumnDatatypes.put("CALCULATED_HOURS", "STRING");
                            tableColumnDatatypes.put("MISSIONS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);

                        }
                        else if(reqPage.equalsIgnoreCase("salary")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Salary Period");
                            tableContentCols.add("Advance Date");
                            tableContentCols.add("Comments");

                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select SAL_PERIOD,SALARY_DATE,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("SAL_PERIOD", "STRING");
                            tableColumnDatatypes.put("SALARY_DATE", "DATE");
                            tableColumnDatatypes.put("MISSIONS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                            
                        }
                        else if(reqPage.equalsIgnoreCase("BusinessTrip")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Trip Type");
                            tableContentCols.add("Airline Ticket Type");
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Destination Category");
                            tableContentCols.add("Number Of Days");
                            tableContentCols.add("Exit Reentry Visa");
                            tableContentCols.add("Destination Country");
                            tableContentCols.add("Advance PerDiem");
                            tableContentCols.add("Destination Visa Required");
                            tableContentCols.add("Project Type");
                            tableContentCols.add("Comments");
                            
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,(select country_name from country where country_id = DESTINATION_COUNTRY) DESTINATION_COUNTRY,ADV_PERDIEM,DEST_VISA_REQUIRED,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'PROJ_TYPE' and dtl.lookup_value_name=PROJ_TYPE) PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
                            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
                            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
                            tableColumnDatatypes.put("DESTINATION_COUNTRY", "STRING");
                            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
                            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
                            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
                            tableColumnDatatypes.put("COMMENTS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Activity");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery(" select start_date, end_date, activity from XXHCM_PURPOSE_OF_TRVL where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                                     emailReq.getRequestId()+")");
                            tableDetail.setTableLabel("Trip Activity");
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("ACTIVITY", "STRING");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("BusinessTripCompletion")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Business Travel Request Number");
                            tableContentCols.add("Trip Type");
                            tableContentCols.add("Airline Ticket Type");
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Destination Category");
                            tableContentCols.add("Number Of Days");
                            tableContentCols.add("Exit Reentry Visa");
                            tableContentCols.add("Destination Country");
                            tableContentCols.add("Advance PerDiem");
                            tableContentCols.add("Destination Visa Required");
                            tableContentCols.add("Project Type");
                            tableContentCols.add("Comments");
                            
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select BUSS_TRAV_REQ_NUM_VALUE,TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,(select country_name from country where country_id = DESTINATION_COUNTRY) DESTINATION_COUNTRY,ADV_PERDIEM,DEST_VISA_REQUIRED,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'PROJ_TYPE' and dtl.lookup_value_name=PROJ_TYPE) PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("BUSS_TRAV_REQ_NUM_VALUE", "STRING");
                            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
                            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
                            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
                            tableColumnDatatypes.put("DESTINATION_COUNTRY", "STRING");
                            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
                            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
                            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
                            tableColumnDatatypes.put("COMMENTS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Activity");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery(" select start_date, end_date, activity from XXHCM_PURPOSE_OF_TRVL where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                                     emailReq.getRequestId()+")");
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("ACTIVITY", "STRING");
                            tableDetail.setTableLabel("Trip Activity");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Number Of Days");
                            tableContentCols.add("Perdiem Per day");
                            tableContentCols.add("Total Perdiem");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select number_of_days, perdiem_per_Day, total_perdiem from xxhcm_overtime_details_all where req_id = " +emailReq.getRequestId());
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("PERDIEM_PER_DAY", "STRING");
                            tableColumnDatatypes.put("TOTAL_PERDIEM", "STRING");
                            tableDetail.setTableLabel("Business Trip Reimbursement Info");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Expense Description");
                            tableContentCols.add("Currency");
                            tableContentCols.add("Exchange Rate");
                            tableContentCols.add("Expense Amount");
                            tableContentCols.add("Amount in SAR");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery(" select expn_desc, currency, exchn_rate, other_expn, total_amount  from XXHCM_OTHER_EXPENSE where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                                     emailReq.getRequestId()+")");
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("EXPN_DESC", "STRING");
                            tableColumnDatatypes.put("CURRENCY", "STRING");
                            tableColumnDatatypes.put("EXCHN_RATE", "STRING");
                            tableColumnDatatypes.put("OTHER_EXPN", "STRING");
                            tableColumnDatatypes.put("TOTAL_AMOUNT", "STRING");
                            tableDetail.setTableLabel("Other Expenses");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Grand Total");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select (total_perdiem + nvl((select sum(total_amount) from XXHCM_OTHER_EXPENSE where REQ_DTLS_ID =" +
                                "(select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = "+emailReq.getRequestId()+")),0)) Grand_Total " +
                                       "from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +emailReq.getRequestId());
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("GRAND_TOTAL", "STRING");
                            tableDetail.setTableLabel("Grand Total");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("edu")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Invoice Number");
                            tableContentCols.add("Invoice Date");
                            tableContentCols.add("Invoice Amount");
                            tableContentCols.add("Child Name");
                            tableContentCols.add("School Grade");
                            tableContentCols.add("Actual Amount");
                            tableContentCols.add("School");
                            tableContentCols.add("Age");
                            tableContentCols.add("Semester");
                            tableContentCols.add("Max Eligible Amount");
                            tableContentCols.add("Available Amount");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select INV_NUM,INV_DATE,INV_TOTAL,(select display_name from XXSTG_PERSON where person_id = contactpersonid) CHILD,GRADE,ACT_AMT,SCHOOL,AGE,SEMESTER,MAX_AMT,AVL_AMT from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("INV_NUM", "STRING");
                            tableColumnDatatypes.put("INV_DATE", "DATE");
                            tableColumnDatatypes.put("INV_TOTAL", "STRING");
                            tableColumnDatatypes.put("CHILD", "STRING");
                            tableColumnDatatypes.put("GRADE", "STRING");
                            tableColumnDatatypes.put("ACT_AMT", "STRING");
                            tableColumnDatatypes.put("SCHOOL", "STRING");
                            tableColumnDatatypes.put("AGE", "STRING");
                            tableColumnDatatypes.put("SEMESTER", "STRING");
                            tableColumnDatatypes.put("MAX_AMT", "STRING");
                            tableColumnDatatypes.put("AVL_AMT", "STRING");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("letter")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Letter Type");
                            tableContentCols.add("Letter To");
                            tableContentCols.add("Others");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select (select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'LETTER_TYPE' and dtl.lookup_value_name=LETTER_TYPE) LETTER_TYPE,LETTER_TO,OTHER from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("LETTER_TYPE", "STRING");
                            tableColumnDatatypes.put("LETTER_TO", "STRING");
                            tableColumnDatatypes.put("OTHER", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("vacation")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Leave");
                            tableContentCols.add("Number of Days");
                            tableContentCols.add("Comments");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select LEAVE,NO_OF_DAYS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("LEAVE", "STRING");
                            tableColumnDatatypes.put("NO_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("MISSIONS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("house")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Advance Amount");
                            tableContentCols.add("Salary Date");
                            tableContentCols.add("Comments");
                            tableContentCols.add("No. of Months");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select ADV_AMT,SALARY_DATE,COMMENTS,MONTHS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("ADV_AMT", "STRING");
                            tableColumnDatatypes.put("SALARY_DATE", "DATE");
                            tableColumnDatatypes.put("COMMENTS", "STRING");
                            tableColumnDatatypes.put("MONTHS", "STRING");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }


                        //Code for Sending email for second approver
                        if(!(reqType != null && "BusinessTrip".equalsIgnoreCase(reqType) && advPerdiem != null && "NO".equalsIgnoreCase(advPerdiem))){
                            GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));
                        }
                        if(jobLevelInt == 2){     
                            
                            ViewObject empSManager = getGetManagerDetailsROVO1();
                            empSManager.setNamedWhereClauseParam("p_emp_id", managerId);
                            empSManager.executeQuery();
                            if(empSManager.hasNext()){
                                managerId =  (BigDecimal)empSManager.first().getAttribute("ManagerId");
                                //BV_EMP_ID
                                ViewObject empSManagerDet = getemployeeROVO1();
                                empSManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                                empSManagerDet.executeQuery();
                                if(empSManagerDet.hasNext()){
                                    managerName =(String)empSManagerDet.first().getAttribute("EmpName");
                                    emailAddress =(String)empSManagerDet.first().getAttribute("EmailAddress");
                                }else{
                                    managerName = null;
                                    emailAddress = null;
                                }
                               
                        if(ORIGINAL_EMAILS){
                            if(emailAddress == null){
                                emailAddress = "paas.user@salic.com";
                            }
                            String[] to = {emailAddress};
                            emailReq.setToEmail(to);
                        }
                        else{
                            String[] to = { "paas.user@salic.com" }; 
                            emailReq.setToEmail(to);
                        }
                        
                                emailReq.setRequestNo(reqNumber);
                        emailReq.setToEmpName(managerName);
                        emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") is approved successfully.");
                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") for "+empRName+", is approved successfully. This is for your information Only.");
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons.put("More Info", "");
                        emailReq.setActionButtons(actionButtons);
                        emailHapmap =
                            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());

                        if(!(reqType != null && "BusinessTrip".equalsIgnoreCase(reqType) && advPerdiem != null && "NO".equalsIgnoreCase(advPerdiem))){
                        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));
                        }
                            }
                        }
                    }                    
                }
                //Custom Approval group
                if(ApprGroupId.compareTo(new BigDecimal(100011)) == 0){
                    ViewObject approvgrpDet = getgetApprovalGrpDetailsROVO1();
                    approvgrpDet.setNamedWhereClauseParam("p_cust_group_id", CustApprGroupId);
                    approvgrpDet.executeQuery(); 
                    rsigrpDet = approvgrpDet.createRowSetIterator("grp");
                    while(rsigrpDet.hasNext()){
                        getApprovalGrpDetailsROVORowImpl grpRec = (getApprovalGrpDetailsROVORowImpl)rsigrpDet.next();  
                        
                        EmailRequestPojo emailReq = new EmailRequestPojo();
                        
                        emailAddress = grpRec.getEmailAddress();
                        
                        if(ORIGINAL_EMAILS){
                            if(emailAddress == null){
                                emailAddress = "paas.user@salic.com";
                            }
                            String[] to = {emailAddress};
                            emailReq.setToEmail(to);
                        }
                        else{
                            String[] to = { "paas.user@salic.com" }; 
                            emailReq.setToEmail(to);
                        }
                        
                        emailReq.setRequestNo(reqNumber);
                        emailReq.setRequestId(new Integer(req_id+""));
                        emailReq.setToEmpName(grpRec.getEmployeeName());
                        emailReq.setSubject("FYI : "+getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") is approved successfully.");
                        emailReq.setMessage(getStringBasedOnReqType(reqType)+" ("+emailReq.getRequestNo()+") for "+empRName+", is approved successfully. This is for your information Only.");
                        
                        
                        String reqPage = reqType;
                        
                        if (reqPage.equalsIgnoreCase("ot")) {
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Overtime Date");
                            tableContentCols.add("Overtime Type");
                            tableContentCols.add("Overtime Hours");
                            tableContentCols.add("Calculated Hours");
                            tableContentCols.add("Description");

                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select OVERTIME_DATE,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'OT_TYPE' and dtl.lookup_value_name=OVERTIME_TYPE) OVERTIME_TYPE,OVERTIME_HOURS,CALCULATED_HOURS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("OVERTIME_DATE", "DATE");
                            tableColumnDatatypes.put("OVERTIME_TYPE", "STRING");
                            tableColumnDatatypes.put("OVERTIME_HOURS", "STRING");
                            tableColumnDatatypes.put("CALCULATED_HOURS", "STRING");
                            tableColumnDatatypes.put("MISSIONS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);

                        }
                        else if(reqPage.equalsIgnoreCase("salary")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Salary Period");
                            tableContentCols.add("Advance Date");
                            tableContentCols.add("Comments");

                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select SAL_PERIOD,SALARY_DATE,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("SAL_PERIOD", "STRING");
                            tableColumnDatatypes.put("SALARY_DATE", "DATE");
                            tableColumnDatatypes.put("MISSIONS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                            
                        }
                        else if(reqPage.equalsIgnoreCase("BusinessTrip")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Trip Type");
                            tableContentCols.add("Airline Ticket Type");
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Destination Category");
                            tableContentCols.add("Number Of Days");
                            tableContentCols.add("Exit Reentry Visa");
                            tableContentCols.add("Destination Country");
                            tableContentCols.add("Advance PerDiem");
                            tableContentCols.add("Destination Visa Required");
                            tableContentCols.add("Project Type");
                            tableContentCols.add("Comments");
                            
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,(select country_name from country where country_id = DESTINATION_COUNTRY) DESTINATION_COUNTRY,ADV_PERDIEM,DEST_VISA_REQUIRED,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'PROJ_TYPE' and dtl.lookup_value_name=PROJ_TYPE) PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
                            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
                            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
                            tableColumnDatatypes.put("DESTINATION_COUNTRY", "STRING");
                            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
                            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
                            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
                            tableColumnDatatypes.put("COMMENTS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Activity");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select start_date, end_date, activity from XXHCM_PURPOSE_OF_TRVL where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                                     emailReq.getRequestId() + ")");
                            tableDetail.setTableLabel("Trip Activity");
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("ACTIVITY", "STRING");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("BusinessTripCompletion")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Business Travel Request Number");
                            tableContentCols.add("Trip Type");
                            tableContentCols.add("Airline Ticket Type");
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Destination Category");
                            tableContentCols.add("Number Of Days");
                            tableContentCols.add("Exit Reentry Visa");
                            tableContentCols.add("Destination Country");
                            tableContentCols.add("Advance PerDiem");
                            tableContentCols.add("Destination Visa Required");
                            tableContentCols.add("Project Type");
                            tableContentCols.add("Comments");
                            
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select BUSS_TRAV_REQ_NUM_VALUE,TRIP_TYPE,AIRLINE_TICKET_TYPE,START_DATE,END_DATE,DEST_CATEGORY,NUMBER_OF_DAYS,EXIT_RERENTRY_VISA,(select country_name from country where country_id = DESTINATION_COUNTRY) DESTINATION_COUNTRY,ADV_PERDIEM,DEST_VISA_REQUIRED,(select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'PROJ_TYPE' and dtl.lookup_value_name=PROJ_TYPE) PROJ_TYPE,COMMENTS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("BUSS_TRAV_REQ_NUM_VALUE", "STRING");
                            tableColumnDatatypes.put("TRIP_TYPE", "STRING");
                            tableColumnDatatypes.put("AIRLINE_TICKET_TYPE", "STRING");
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("DEST_CATEGORY", "STRING");
                            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("EXIT_RERENTRY_VISA", "STRING");
                            tableColumnDatatypes.put("DESTINATION_COUNTRY", "STRING");
                            tableColumnDatatypes.put("ADV_PERDIEM", "STRING");
                            tableColumnDatatypes.put("DEST_VISA_REQUIRED", "STRING");
                            tableColumnDatatypes.put("PROJ_TYPE", "STRING");
                            tableColumnDatatypes.put("COMMENTS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Start Date");
                            tableContentCols.add("End Date");
                            tableContentCols.add("Activity");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery(" select start_date, end_date, activity from XXHCM_PURPOSE_OF_TRVL where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                                     emailReq.getRequestId()+")");
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("START_DATE", "DATE");
                            tableColumnDatatypes.put("END_DATE", "DATE");
                            tableColumnDatatypes.put("ACTIVITY", "STRING");
                            tableDetail.setTableLabel("Trip Activity");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Number Of Days");
                            tableContentCols.add("Perdiem Per day");
                            tableContentCols.add("Total Perdiem");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select number_of_days, perdiem_per_Day, total_perdiem from xxhcm_overtime_details_all where req_id = " +emailReq.getRequestId());
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("NUMBER_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("PERDIEM_PER_DAY", "STRING");
                            tableColumnDatatypes.put("TOTAL_PERDIEM", "STRING");
                            tableDetail.setTableLabel("Business Trip Reimbursement Info");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Expense Description");
                            tableContentCols.add("Currency");
                            tableContentCols.add("Exchange Rate");
                            tableContentCols.add("Expense Amount");
                            tableContentCols.add("Amount in SAR");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery(" select expn_desc, currency, exchn_rate, other_expn, total_amount  from XXHCM_OTHER_EXPENSE where REQ_DTLS_ID = (select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +
                                                     emailReq.getRequestId()+")");
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("EXPN_DESC", "STRING");
                            tableColumnDatatypes.put("CURRENCY", "STRING");
                            tableColumnDatatypes.put("EXCHN_RATE", "STRING");
                            tableColumnDatatypes.put("OTHER_EXPN", "STRING");
                            tableColumnDatatypes.put("TOTAL_AMOUNT", "STRING");
                            tableDetail.setTableLabel("Other Expenses");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            tableDetail = new EmailTableDetailsPojo(); 
                            
                            tableContentCols = new ArrayList<String>();
                            tableContentCols.add("Grand Total");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select (total_perdiem + nvl((select sum(total_amount) from XXHCM_OTHER_EXPENSE where REQ_DTLS_ID =" +
                                "(select req_dtls_id from XXHCM_OVERTIME_DETAILS_ALL where req_id = "+emailReq.getRequestId()+")),0)) Grand_Total " +
                                       "from XXHCM_OVERTIME_DETAILS_ALL where req_id = " +emailReq.getRequestId());
                            
                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("GRAND_TOTAL", "STRING");
                            tableDetail.setTableLabel("Grand Total");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("edu")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Invoice Number");
                            tableContentCols.add("Invoice Date");
                            tableContentCols.add("Invoice Amount");
                            tableContentCols.add("Child Name");
                            tableContentCols.add("School Grade");
                            tableContentCols.add("Actual Amount");
                            tableContentCols.add("School");
                            tableContentCols.add("Age");
                            tableContentCols.add("Semester");
                            tableContentCols.add("Max Eligible Amount");
                            tableContentCols.add("Available Amount");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select INV_NUM,INV_DATE,INV_TOTAL,(select display_name from XXSTG_PERSON where person_id = contactpersonid) CHILD,GRADE,ACT_AMT,SCHOOL,AGE,SEMESTER,MAX_AMT,AVL_AMT from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("INV_NUM", "STRING");
                            tableColumnDatatypes.put("INV_DATE", "DATE");
                            tableColumnDatatypes.put("INV_TOTAL", "STRING");
                            tableColumnDatatypes.put("CHILD", "STRING");
                            tableColumnDatatypes.put("GRADE", "STRING");
                            tableColumnDatatypes.put("ACT_AMT", "STRING");
                            tableColumnDatatypes.put("SCHOOL", "STRING");
                            tableColumnDatatypes.put("AGE", "STRING");
                            tableColumnDatatypes.put("SEMESTER", "STRING");
                            tableColumnDatatypes.put("MAX_AMT", "STRING");
                            tableColumnDatatypes.put("AVL_AMT", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("letter")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Letter Type");
                            tableContentCols.add("Letter To");
                            tableContentCols.add("Others");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select (select dtl.lookup_value_name_disp from xxfnd_lookup_types_t hdr,xxfnd_lookup_values_t dtl where hdr.lookup_type_id = dtl.lookup_type_id and  hdr.lookup_type_name = 'LETTER_TYPE' and dtl.lookup_value_name=LETTER_TYPE) LETTER_TYPE,LETTER_TO,OTHER from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("LETTER_TYPE", "STRING");
                            tableColumnDatatypes.put("LETTER_TO", "STRING");
                            tableColumnDatatypes.put("OTHER", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("vacation")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Leave");
                            tableContentCols.add("Number of Days");
                            tableContentCols.add("Comments");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select LEAVE,NO_OF_DAYS,MISSIONS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("LEAVE", "STRING");
                            tableColumnDatatypes.put("NO_OF_DAYS", "STRING");
                            tableColumnDatatypes.put("MISSIONS", "STRING");
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        else if(reqPage.equalsIgnoreCase("house")){
                            
                            ArrayList<EmailTableDetailsPojo> emailTableDetails = new ArrayList<EmailTableDetailsPojo>();    
                            EmailTableDetailsPojo tableDetail = new EmailTableDetailsPojo(); 
                            ArrayList<String> tableContentCols = new ArrayList<String>();
                            LinkedHashMap<String, String> tableColumnDatatypes = null;
                            
                            tableContentCols.add("Advance Amount");
                            tableContentCols.add("Salary Date");
                            tableContentCols.add("Comments");
                            tableContentCols.add("No. of Months");
                            
                            tableDetail.setTableContentColumns(tableContentCols);


                            tableDetail.setDetailsQuery("select ADV_AMT,SALARY_DATE,COMMENTS,MONTHS from XXHCM_OVERTIME_DETAILS_ALL where REQ_ID=" +
                                                     emailReq.getRequestId());

                            tableColumnDatatypes = new LinkedHashMap<String, String>();
                            tableColumnDatatypes.put("ADV_AMT", "STRING");
                            tableColumnDatatypes.put("SALARY_DATE", "DATE");
                            tableColumnDatatypes.put("COMMENTS", "STRING");
                            tableColumnDatatypes.put("MONTHS", "STRING");
                            
                            tableDetail.setTableColumnDatatypes(tableColumnDatatypes);
                            
                            emailTableDetails.add(tableDetail);
                            emailReq.setTableDetails(emailTableDetails);
                        }
                        
                        LinkedHashMap<String, String> actionButtons = new LinkedHashMap<String, String>();
                        actionButtons = new LinkedHashMap<String, String>();
                        actionButtons.put("More Info", "");
                        emailReq.setActionButtons(actionButtons);
                        Map<String, Object> emailHapmap =
                            GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        emailHapmap = GenerateEmailTemplate.prepareEmailTemplate(emailReq, getDBTransaction());
                        if (payrollGroup != null && "Y".equalsIgnoreCase(payrollGroup)) {
                            if (reqType != null && "BusinessTrip".equalsIgnoreCase(reqType)) {
                                FetchAdvPerdiemVOImpl advPerdiemVO = getFetchAdvPerdiemVO1();
                                advPerdiemVO.setbindReqId(new BigDecimal(emailReq.getRequestId()));
                                advPerdiemVO.executeQuery();
                                if (advPerdiemVO.first() != null) {
                                    advPerdiem = (String) advPerdiemVO.first().getAttribute("AdvPerdiem");
                                }
                            }
                        }
                        //Code for Sending email for second approver
                        if(!(reqType != null && "BusinessTrip".equalsIgnoreCase(reqType) && advPerdiem != null && "NO".equalsIgnoreCase(advPerdiem)))
                        GenerateEmailTemplate.sendFromGMail(emailReq.getToEmail(), emailHapmap.get("subject")+"", emailHapmap.get("body")+"", (ArrayList) emailHapmap.get("bodyParts"));
                    }
                    rsigrpDet.closeRowSetIterator();
                }
            }
            rsi.closeRowSetIterator();
        } catch (Exception e) {
            if(rsi!=null){
                rsi.closeRowSetIterator();  
            }
            if(rsigrpDet!=null){
                rsigrpDet.closeRowSetIterator(); 
            }
        }
    }
    private String getStringBasedOnReqType(String reqType){
        String reqty = null;
        if(reqType.equalsIgnoreCase("ot"))
            return "Overtime";       
        if(reqType.equalsIgnoreCase("salary"))
            return "Salary In Advance";
        if(reqType.equalsIgnoreCase("BusinessTrip"))
            return "Business Trip";
        if(reqType.equalsIgnoreCase("BusinessTripCompletion"))
            return "Business Trip Completion";
        if(reqType.equalsIgnoreCase("edu"))
            return "Education Allowance";
        if(reqType.equalsIgnoreCase("letter"))
            return "HR Letter";
        if(reqType.equalsIgnoreCase("vacation"))
            return "Vacation Allowance";
        if(reqType.equalsIgnoreCase("house"))
            return "Housing Advance";
        
        //house
        
        return reqty;
    }
    
    public String getDecodedReqType(String reqType){
        String reqty = null;
        if(reqType.equalsIgnoreCase("ot"))
            return "OVER_TIME";       
        if(reqType.equalsIgnoreCase("salary"))
            return "SAL_ADV";
        if(reqType.equalsIgnoreCase("BusinessTrip"))
            return "BUSINESS_TRIP";
        if(reqType.equalsIgnoreCase("BusinessTripCompletion"))
            return "BUSINESS_TRIP_COM";
        if(reqType.equalsIgnoreCase("edu"))
            return "EDU_ALL";
        if(reqType.equalsIgnoreCase("letter"))
            return "HR_LETTER";
        if(reqType.equalsIgnoreCase("vacation"))
            return "VAC_ALL";
        if(reqType.equalsIgnoreCase("house"))
            return "HOUSE_ADV";
        
        //house
        
        return reqty;
    }

    /**
     * Container's getter for getApprovalSetupDetailsROVO1.
     * @return getApprovalSetupDetailsROVO1
     */
    public getApprovalSetupDetailsROVOImpl getgetApprovalSetupDetailsROVO1() {
        return (getApprovalSetupDetailsROVOImpl) findViewObject("getApprovalSetupDetailsROVO1");
    }

    /**
     * Container's getter for getApprovalGrpDetailsROVO1.
     * @return getApprovalGrpDetailsROVO1
     */
    public getApprovalGrpDetailsROVOImpl getgetApprovalGrpDetailsROVO1() {
        return (getApprovalGrpDetailsROVOImpl) findViewObject("getApprovalGrpDetailsROVO1");
    }

    /**
     * Container's getter for GetJobLevelROVO1.
     * @return GetJobLevelROVO1
     */
    public GetJobLevelROVOImpl getGetJobLevelROVO1() {
        return (GetJobLevelROVOImpl) findViewObject("GetJobLevelROVO1");
    }

    /**
     * Container's getter for GetManagerDetailsROVO1.
     * @return GetManagerDetailsROVO1
     */
    public GetManagerDetailsROVOImpl getGetManagerDetailsROVO1() {
        return (GetManagerDetailsROVOImpl) findViewObject("GetManagerDetailsROVO1");
    }

    /**
     * Container's getter for employeeROVO1.
     * @return employeeROVO1
     */
    public ViewObjectImpl getemployeeROVO1() {
        return (ViewObjectImpl) findViewObject("employeeROVO1");
    }

    /**
     * Container's getter for FetchEmailActionLinkVO1.
     * @return FetchEmailActionLinkVO1
     */
    public FetchEmailActionLinkVOImpl getFetchEmailActionLinkVO1() {
        return (FetchEmailActionLinkVOImpl) findViewObject("FetchEmailActionLinkVO1");
    }

    /**
     * Container's getter for FetchDestVisaReqdVO1.
     * @return FetchDestVisaReqdVO1
     */
    public FetchDestVisaReqdVOImpl getFetchDestVisaReqdVO1() {
        return (FetchDestVisaReqdVOImpl) findViewObject("FetchDestVisaReqdVO1");
    }

    /**
     * Container's getter for ManagerDashBoardCountVO1.
     * @return ManagerDashBoardCountVO1
     */
    public ManagerDashBoardCountVOImpl getManagerDashBoardCountVO1() {
        return (ManagerDashBoardCountVOImpl) findViewObject("ManagerDashBoardCountVO1");
    }
    
    public void deleteActionReqHist(BigDecimal reqId){
        try {
                    Statement stmt = getDBTransaction().createPreparedStatement("select * from dual", 1)
                                                       .getConnection()
                                                       .createStatement();
                    String query =  " delete XX_QP_ACTION_HISTORY_T where header_id = "+reqId.toString();
            
                        
                    int count = stmt.executeUpdate(query);
            
            } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                }
    }
    
    public Integer getMaximumLevelForRequest(String reqId){
        Integer maxLevel = 0;
        try {
            Statement stmt = getDBTransaction().createPreparedStatement("select * from dual", 1)
                                               .getConnection()
                                               .createStatement();
            String query =
                "select  XXSALIC_HCM_PKG.getMaximumLevel("+reqId+") max_count from dual";
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            maxLevel = rs.getInt("max_count");
        } catch (SQLException sqle) {
        }
        
        return maxLevel;
        
    }
    
    
    public Integer getMaximumActionSetForRequest(String reqId){
        Integer maxLevel = 0;
        try {
            Statement stmt = getDBTransaction().createPreparedStatement("select * from dual", 1)
                                               .getConnection()
                                               .createStatement();
            String query =
                "SELECT max(action_set) max_set\n" + 
                "      FROM XX_QP_ACTION_HISTORY_T\n" + 
                "      WHERE HEADER_ID    = "+reqId;
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            maxLevel = rs.getInt("max_set");
        } catch (SQLException sqle) {
        }
        if(maxLevel!=null){
            maxLevel = maxLevel + 1;
        }else{
            maxLevel = 1;
        }
        return maxLevel;
        
    }
    
    
    public void populateApproversForReqest(String reqStatus,String reqNumber,oracle.jbo.domain.Number empId,String reqType,oracle.jbo.domain.Number req_id){
        BigDecimal empIdB = empId.bigDecimalValue();
        int apprSeqNew = getMaximumLevelForRequest(req_id.toString());
        int actionSet = getMaximumActionSetForRequest(req_id.toString());
        ViewObject approvSetup = getgetApprovalSetupDetailsROVO1();
        approvSetup.setNamedWhereClauseParam("p_appr_type", "Approval");
        approvSetup.setNamedWhereClauseParam("p_req_type", getDecodedReqType(reqType));
        approvSetup.executeQuery();
        RowSetIterator rsi  = null;
        RowSetIterator rsigrpDet = null;
        Integer jobLevelInt = null;
        String JobLevel = null;
        ViewObject empJobLev = getGetJobLevelROVO1();
        empJobLev.setNamedWhereClauseParam("p_emp_id", empIdB);
        empJobLev.executeQuery();
        if(empJobLev.hasNext()){
            JobLevel =  (String)empJobLev.first().getAttribute("JobLevel");
            jobLevelInt = Integer.parseInt(JobLevel);
        }
        try {
            rsi = approvSetup.createRowSetIterator("apprSetup");
            rsi.reset();
            while (rsi.hasNext()) {
                getApprovalSetupDetailsROVORowImpl apprSetRow = (getApprovalSetupDetailsROVORowImpl)rsi.next();
                BigDecimal ApprLevel = apprSetRow.getApprLevel();
                BigDecimal ApprGroupId= apprSetRow.getApprGroupId();
                BigDecimal CustApprGroupId= apprSetRow.getCustApprGroupId();
                BigDecimal managerId = null;
                String managerName = null;
                //Superwiser
                if(ApprGroupId.compareTo(new BigDecimal(100012)) == 0){
                    ViewObject empManager = getGetManagerDetailsROVO1();
                    empManager.setNamedWhereClauseParam("p_emp_id", empIdB);
                    empManager.executeQuery();
                    if(empManager.hasNext()){
                        managerId =  (BigDecimal)empManager.first().getAttribute("ManagerId");
                        //BV_EMP_ID
                        ViewObject empManagerDet = getemployeeROVO1();
                        empManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                        empManagerDet.executeQuery();
                        if(empManagerDet.hasNext()){
                            managerName =(String)empManagerDet.first().getAttribute("EmpName");
                        }
                        Row vonew = getXxQpActionHistoryTVO1().createRow();
                        //xx_qp_action_history_s
                        apprSeqNew = apprSeqNew + 1;
                        SequenceImpl si = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
                        vonew.setAttribute("ActionHistoryId", si.getSequenceNumber());
                        vonew.setAttribute("HeaderId", req_id.bigDecimalValue());
                        vonew.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
                        vonew.setAttribute("ApproverId", managerId);
                        vonew.setAttribute("ApproverUserName", managerName);
                        vonew.setAttribute("ApproverComments", null);
                        vonew.setAttribute("ApproverFlag", null);
                        if(jobLevelInt == 0)
                        vonew.setAttribute("ApproverFlag", "A");
                        vonew.setAttribute("Active", "A");        
                        vonew.setAttribute("ReqStatus", reqStatus);
                        vonew.setAttribute("ActionSet", actionSet);
                        vonew.setAttribute("Type", "H");
                        vonew.setAttribute("Page", getDecodedReqType(reqType));
                        vonew.setAttribute("ApprType", "Approval");
                        vonew.setAttribute("CreatedBy", empIdB.toString());
                        //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
                        vonew.setAttribute("LastUpdatedBy", empIdB.toString());
                        //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
                        vonew.setAttribute("LastUpdateLogin", empIdB.toString());
                        //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show    
                        vonew.setAttribute("ReqNumber", reqNumber);
                        getXxQpActionHistoryTVO1().insertRow(vonew);
                        
                        if(jobLevelInt == 2){     
                            
                            ViewObject empSManager = getGetManagerDetailsROVO1();
                            empSManager.setNamedWhereClauseParam("p_emp_id", managerId);
                            empSManager.executeQuery();
                            if(empSManager.hasNext()){
                                managerId =  (BigDecimal)empSManager.first().getAttribute("ManagerId");
                                //BV_EMP_ID
                                ViewObject empSManagerDet = getemployeeROVO1();
                                empSManagerDet.setNamedWhereClauseParam("BV_EMP_ID", managerId);
                                empSManagerDet.executeQuery();
                                if(empSManagerDet.hasNext()){
                                    managerName =(String)empSManagerDet.first().getAttribute("EmpName");
                                }else{
                                    managerName = null;
                                }
                                Row vonew1 = getXxQpActionHistoryTVO1().createRow();
                                //xx_qp_action_history_s
                                apprSeqNew = apprSeqNew + 1;
                                SequenceImpl si1 = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
                                vonew1.setAttribute("ActionHistoryId", si1.getSequenceNumber());
                                vonew1.setAttribute("HeaderId", req_id.bigDecimalValue());
                                vonew1.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
                                vonew1.setAttribute("ApproverId", managerId);
                                vonew1.setAttribute("ApproverUserName", managerName);
                                vonew1.setAttribute("ApproverComments", null);
                                vonew1.setAttribute("ApproverFlag", null);
                                vonew1.setAttribute("Active", "A");        
                                vonew1.setAttribute("ReqStatus", reqStatus);
                                vonew1.setAttribute("ActionSet", actionSet);        
                                vonew1.setAttribute("Type", "H");
                                vonew1.setAttribute("Page", getDecodedReqType(reqType));
                                vonew1.setAttribute("ApprType", "Approval");
                                vonew1.setAttribute("CreatedBy", empIdB.toString());
                                //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
                                vonew1.setAttribute("LastUpdatedBy", empIdB.toString());
                                //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
                                vonew1.setAttribute("LastUpdateLogin", empIdB.toString());
                                //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show    
                                vonew1.setAttribute("ReqNumber", reqNumber);
                                getXxQpActionHistoryTVO1().insertRow(vonew1);
                            }
                        }
                    }                    
                }
                //Custom Approval group
                if(ApprGroupId.compareTo(new BigDecimal(100011)) == 0){
                    ViewObject approvgrpDet = getgetApprovalGrpDetailsROVO1();
                    approvgrpDet.setNamedWhereClauseParam("p_cust_group_id", CustApprGroupId);
                    approvgrpDet.executeQuery(); 
                    rsigrpDet = approvgrpDet.createRowSetIterator("grp");
                    while(rsigrpDet.hasNext()){
                        getApprovalGrpDetailsROVORowImpl grpRec = (getApprovalGrpDetailsROVORowImpl)rsigrpDet.next();
                        Row vonewgrp = getXxQpActionHistoryTVO1().createRow();
                        //xx_qp_action_history_s
                        apprSeqNew = apprSeqNew + 1;
                        SequenceImpl si1 = new SequenceImpl("xx_qp_action_history_s",this.getDBTransaction());
                        vonewgrp.setAttribute("ActionHistoryId", si1.getSequenceNumber());
                        vonewgrp.setAttribute("HeaderId", req_id.bigDecimalValue());
                        vonewgrp.setAttribute("ApproveLevel", new BigDecimal(apprSeqNew));
                        vonewgrp.setAttribute("ApproverId", grpRec.getEmployeeId());
                        vonewgrp.setAttribute("ApproverUserName", grpRec.getEmployeeName());
                        vonewgrp.setAttribute("ApproverComments", null);
                        vonewgrp.setAttribute("ApproverFlag", null);
                        if(jobLevelInt == 0)
                        vonewgrp.setAttribute("ApproverFlag", "A");
                        vonewgrp.setAttribute("Active", "A");        
                        vonewgrp.setAttribute("ReqStatus", reqStatus);
                        vonewgrp.setAttribute("ActionSet", actionSet);
                        vonewgrp.setAttribute("Type", "H");
                        vonewgrp.setAttribute("Page", getDecodedReqType(reqType));
                        vonewgrp.setAttribute("ApprType", "Approval");
                        vonewgrp.setAttribute("CreatedBy", empIdB.toString());
                        //vonew.setAttribute("CreationDate", apprRow.getAttribute(""));
                        vonewgrp.setAttribute("LastUpdatedBy", empIdB.toString());
                        //vonew.setAttribute("LastUpdateDate", apprRow.getAttribute(""));
                        vonewgrp.setAttribute("LastUpdateLogin", empIdB.toString());
                        //ReqNumber String  REQ_NUMBER      XxQpActionHistoryTEO    Show    
                        vonewgrp.setAttribute("ReqNumber", reqNumber);
                        getXxQpActionHistoryTVO1().insertRow(vonewgrp);                         
                    }
                    rsigrpDet.closeRowSetIterator();
                }
            }
            rsi.closeRowSetIterator();
        } catch (Exception e) {
            if(rsi!=null){
                rsi.closeRowSetIterator();  
            }
            if(rsigrpDet!=null){
                rsigrpDet.closeRowSetIterator(); 
            }
        }
    //        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_typ", reqType);
    //        getXxQpActionHistoryTVO1().setNamedWhereClauseParam("p_req_id", req_id.bigDecimalValue());
    //        getXxQpActionHistoryTVO1().executeQuery();
    //        getXxQpActionHistoryTVO1().getEstimatedRowCount();
    }

    /**
     * Container's getter for XxhcmOvertimeHeadersAllVO1.
     * @return XxhcmOvertimeHeadersAllVO1
     */
    public ViewObjectImpl getXxhcmOvertimeHeadersAllVO1() {
        return (ViewObjectImpl) findViewObject("XxhcmOvertimeHeadersAllVO1");
    }
    

    public void updateHeaderStatus(BigDecimal reqId, BigDecimal approvalTemplateId, String reqStatus, String status){
        ViewObjectImpl hdrVO = getXxhcmOvertimeHeadersAllVO1();
        hdrVO.setWhereClause("Req_Id = "+reqId);
        hdrVO.executeQuery();
        if(hdrVO.first() != null){
            hdrVO.first().setAttribute("ApprovalTemplateId", approvalTemplateId);
            hdrVO.first().setAttribute("ReqStatus", reqStatus);
            hdrVO.first().setAttribute("Status", status);
        }
    }

    /**
     * Container's getter for FetchAdvPerdiemVO1.
     * @return FetchAdvPerdiemVO1
     */
    public FetchAdvPerdiemVOImpl getFetchAdvPerdiemVO1() {
        return (FetchAdvPerdiemVOImpl) findViewObject("FetchAdvPerdiemVO1");
    }
       
    public Integer getCurrentApprForRequest(BigDecimal req_id,String empLogged){
        Integer maxLevel = 0;
        try {
            Statement stmt = getDBTransaction().createPreparedStatement("select * from dual", 1)
                                               .getConnection()
                                               .createStatement();
            String query =
                "SELECT xxsalic_hcm_PKG.get_current_approval_level(" + req_id +
                          "," + empLogged + ") levelapr from dual";
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            maxLevel = rs.getInt("levelapr");
        } catch (SQLException sqle) {
        }
        if(maxLevel!=null){
            maxLevel = maxLevel;
        }else{
            maxLevel = 1;
        }
        return maxLevel;
        
    }
    public void updateRequestReasonForCWR(String reqNumber, BigDecimal req_id, String reason, String empLogged) {
        Integer aprLevel = getCurrentApprForRequest(req_id,empLogged);
        Row[] rows = getXxQpActionHistoryTVO1().getFilteredRows("ApproverId", empLogged);
        RowQualifier rq = new RowQualifier(getXxQpActionHistoryTVO1());
        //Write condition in SQL query format
        rq.setWhereClause("ApproverId='" + empLogged +
                          "' and Active = 'A' and ApproveLevel = "+aprLevel);
        Row filteredRows[] = getXxQpActionHistoryTVO1().getFilteredRows(rq);

        for (Row row : filteredRows) {
            row.setAttribute("ApproverComments", reason);
        }
    }
    public void updateRequestForCWR(String reqStatus,String reqNumber,oracle.jbo.domain.Number empId,String reqType,oracle.jbo.domain.Number req_id){
    //        try {
    //                    Statement stmt = getDBTransaction().createPreparedStatement("select * from dual", 1)
    //                                                       .getConnection()
    //                                                       .createStatement();
    //                    String query =  " update  REQ_STATUS = ''"+reqStatus+"'', Active = 'N' XX_QP_ACTION_HISTORY_T where header_id = "+req_id.toString()+" AND Active = 'Y'";
    //                    int count = stmt.executeUpdate(query);
    //
    //            } catch (SQLException sqle) {
    //            throw new JboException("Error updating the action history while "+reqStatus+" operatrion");
    //            }
    //        populateApproversForReqest(reqStatus,reqNumber,empId,reqType,req_id);
    //
        Row[] rows = getXxQpActionHistoryTVO1().getFilteredRows("Active", "A");
    //        RowSetIterator rsi = getXxQpActionHistoryTVO1().createRowSetIterator("cwr");
    //        rsi.reset();
        //while(rsi.hasNext()){
        for (Row row : rows){
            //XxQpActionHistoryTVORowImpl row = (XxQpActionHistoryTVORowImpl)rsi.next();
            //row.setAttribute("ReqStatus",reqStatus);
            row.setAttribute("Active","N");
        }
        //rsi.closeRowSetIterator();
    }
}
