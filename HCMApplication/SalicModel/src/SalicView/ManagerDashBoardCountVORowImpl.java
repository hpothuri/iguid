package SalicView;

import java.util.HashMap;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ProgrammaticViewRowImpl;
import oracle.jbo.server.ViewAttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 12 02:53:06 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ManagerDashBoardCountVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        ApprovedCount {
            protected Object get(ManagerDashBoardCountVORowImpl obj) {
                return obj.getApprovedCount();
            }

            protected void put(ManagerDashBoardCountVORowImpl obj, Object value) {
                obj.setApprovedCount((Long) value);
            }
        }
        ,
        RejectedCount {
            protected Object get(ManagerDashBoardCountVORowImpl obj) {
                return obj.getRejectedCount();
            }

            protected void put(ManagerDashBoardCountVORowImpl obj, Object value) {
                obj.setRejectedCount((Long) value);
            }
        }
        ,
        PendingCount {
            protected Object get(ManagerDashBoardCountVORowImpl obj) {
                return obj.getPendingCount();
            }

            protected void put(ManagerDashBoardCountVORowImpl obj, Object value) {
                obj.setPendingCount((Long) value);
            }
        }
        ,
        TotalCount {
            protected Object get(ManagerDashBoardCountVORowImpl obj) {
                return obj.getTotalCount();
            }

            protected void put(ManagerDashBoardCountVORowImpl obj, Object value) {
                obj.setTotalCount((Long) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(ManagerDashBoardCountVORowImpl object);

        protected abstract void put(ManagerDashBoardCountVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int APPROVEDCOUNT = AttributesEnum.ApprovedCount.index();
    public static final int REJECTEDCOUNT = AttributesEnum.RejectedCount.index();
    public static final int PENDINGCOUNT = AttributesEnum.PendingCount.index();
    public static final int TOTALCOUNT = AttributesEnum.TotalCount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ManagerDashBoardCountVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ApprovedCount.
     * @return the ApprovedCount
     */
    public Long getApprovedCount() {
        return (Long) getAttributeInternal(APPROVEDCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ApprovedCount.
     * @param value value to set the  ApprovedCount
     */
    public void setApprovedCount(Long value) {
        setAttributeInternal(APPROVEDCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RejectedCount.
     * @return the RejectedCount
     */
    public Long getRejectedCount() {
        return (Long) getAttributeInternal(REJECTEDCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RejectedCount.
     * @param value value to set the  RejectedCount
     */
    public void setRejectedCount(Long value) {
        setAttributeInternal(REJECTEDCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PendingCount.
     * @return the PendingCount
     */
    public Long getPendingCount() {
        return (Long) getAttributeInternal(PENDINGCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PendingCount.
     * @param value value to set the  PendingCount
     */
    public void setPendingCount(Long value) {
        setAttributeInternal(PENDINGCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalCount.
     * @return the TotalCount
     */
    public Long getTotalCount() {
        return (Long) getAttributeInternal(TOTALCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalCount.
     * @param value value to set the  TotalCount
     */
    public void setTotalCount(Long value) {
        setAttributeInternal(TOTALCOUNT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

